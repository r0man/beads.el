{"id":"beads.el-1","title":"beads.el: Magit-like Emacs interface for Beads","description":"Build an Emacs Lisp package that provides a Magit-like porcelain interface for Beads issue tracking. The package should live in the lisp/ directory and provide an intuitive, keyboard-driven UI for working with Beads issues directly from Emacs.\n\nKey features:\n- Status buffer showing issues by status (open, in_progress, blocked, closed)\n- Keyboard shortcuts for common operations (create, update, close, show details)\n- Integration with existing beads CLI via subprocess calls\n- Transient menus for complex operations (similar to Magit's interface)\n- Jump to issue definitions in code\n- Inline editing of issue fields\n- Dependency visualization\n- Integration with Emacs project.el for multi-project support\n\nThis will make Beads more accessible to Emacs users and provide a seamless workflow for AI-supervised coding within the editor.","design":"## Architecture\n\n### Transient Menu System\n- Root transient menu accessible via M-x beads\n- Hierarchical menu structure following Magit patterns\n- All bd CLI commands exposed with full flag/argument support\n- Uses Emacs transient library for interactive menus\n\n### List Display Mode\nCommands that display lists of items should use Emacs tabulated-list-mode:\n- **bd list** - List of issues in tabulated format\n- **bd ready** - Ready work shown in tabulated format\n- **bd blocked** - Blocked issues in tabulated format\n- **bd stats** - Statistics displayed in tabulated format (where applicable)\n- **bd dep list** - Dependencies shown in tabulated format\n\nInterface similar to M-x proced:\n- Sortable columns (click headers to sort)\n- Keyboard navigation (n/p for next/prev)\n- Actions on current item (RET to show details, u to update, c to close, etc.)\n- Refresh capability (g to refresh)\n- Mark/unmark items for batch operations\n- Filter/narrow functionality\n\n### Buffer Organization\n- *beads-status* - Main status buffer (like magit-status)\n- *beads-list* - Issue list buffer (tabulated-list-mode)\n- *beads-ready* - Ready work buffer (tabulated-list-mode)\n- *beads-blocked* - Blocked issues buffer (tabulated-list-mode)\n- *beads-show: \u003cid\u003e* - Issue detail buffers\n- *beads-output* - Command output/results buffer\n\n### Integration Points\n- Uses bd CLI via process calls (call-process, start-process)\n- JSON output parsing for structured data\n- project.el integration for multi-project support\n- Auto-refresh after mutations (create, update, close, etc.)","acceptance_criteria":"### Core Transient Menu System\n- [ ] Main entry point: M-x beads (or custom keybinding) opens root transient menu\n- [ ] Root menu shows all available bd commands organized hierarchically\n- [ ] Navigation through menu hierarchy matches Magit UX patterns\n- [ ] All transient menus use the Emacs transient library\n\n### Command Coverage (100% of bd CLI)\nEvery bd command must be accessible via transient menus with full option support:\n\n- [ ] **init** - Initialize bd in directory\n  - Flags: --prefix, --db path\n  \n- [ ] **create** - Create new issue\n  - Arguments: title (required)\n  - Flags: -t/--type, -p/--priority, -d/--description, --id, --deps, --json\n  \n- [ ] **list** - List issues\n  - Flags: --status, --type, --priority, --format, --json\n  \n- [ ] **show** - Show issue details\n  - Arguments: issue-id (required)\n  - Flags: --json\n  \n- [ ] **update** - Update issue\n  - Arguments: issue-id (required)\n  - Flags: --status, --priority, --type, --title, --acceptance-criteria, --design, --notes, --assignee, --external-ref, --json\n  \n- [ ] **close** - Close issues\n  - Arguments: issue-id(s) (required)\n  - Flags: --reason, --json\n  \n- [ ] **ready** - Show ready work\n  - Flags: --json\n  \n- [ ] **blocked** - Show blocked issues\n  - Flags: --json\n  \n- [ ] **stats** - Show statistics\n  - Flags: --json\n  \n- [ ] **dep** - Dependency management (submenu)\n  - [ ] dep add - Add dependency\n    - Arguments: from-id, to-id (required)\n    - Flags: --type, --json\n  - [ ] dep remove - Remove dependency\n    - Arguments: from-id, to-id (required)\n    - Flags: --json\n  - [ ] dep tree - Show dependency tree\n    - Arguments: issue-id (required)\n    - Flags: --json\n  - [ ] dep list - List dependencies\n    - Arguments: issue-id (required)\n    - Flags: --json\n    \n- [ ] **export** - Export to JSONL\n  - Flags: -o/--output, --json\n  \n- [ ] **import** - Import from JSONL\n  - Flags: -i/--input, --dry-run, --resolve-collisions, --json\n\n### Global Flags Support\n- [ ] All commands support global flags: --actor, --db, --json, --no-auto-flush, --no-auto-import\n- [ ] Transient menu allows setting global flags before command execution\n- [ ] Settings persist within Emacs session\n\n### User Experience\n- [ ] Transient menus show current flag/option values\n- [ ] Help text displays for each option (like Magit's inline help)\n- [ ] Validation for required arguments before command execution\n- [ ] Command output displayed in dedicated buffer\n- [ ] Error messages clearly shown\n- [ ] Success feedback with option to refresh status buffer\n\n### Testing\n- [ ] Manual testing of all commands via transient menus\n- [ ] Verification that all flags/options work correctly\n- [ ] Edge cases (missing required args, invalid values) handled gracefully","notes":"**Core Goal Update (2025-10-18)**: The primary objective of beads.el is to provide complete 1-to-1 coverage of the Beads CLI. For every 'bd' command and flag, there should be a corresponding Emacs command accessible through the beads.el interface. Users should be able to perform all bd operations without leaving Emacs.\n\nThis means:\n- Every bd subcommand (init, create, list, show, update, close, ready, blocked, stats, dep, export, import) must have an Emacs equivalent\n- All flags and options for each command must be supported in the transient menus\n- The Emacs interface should provide the same level of control as the CLI, just with better UX for Emacs users\n\n**New BD CLI Commands Requiring Emacs Implementation (Updated 2025-10-18)**:\nThe following bd commands exist in the CLI but do not have Emacs implementations yet:\n\n1. **compact** - Compact old closed issues using semantic summarization (tier 1: 30 days, tier 2: 90 days)\n2. **daemon** - Run background sync daemon with auto-commit/push capabilities (may be automatic in Emacs context)\n3. **delete** - Delete an issue and clean up all references (destructive operation)\n4. **epic** - Epic management commands (NEW: subcommands for working with epics)\n5. **label** - Manage issue labels (subcommands: add, list, list-all, remove)\n6. **rename-prefix** - Rename the issue prefix for all issues in the database\n7. **renumber** - Renumber all issues sequentially to eliminate ID gaps\n8. **reopen** - Reopen closed issues (more explicit than update --status open)\n9. **restore** - Restore full history of a compacted issue from git\n10. **sync** - Synchronize issues with git remote in single operation\n\n**Already Implemented Commands**:\nThe following bd commands already have Emacs implementations:\n- blocked, close, create, dep (add/remove/tree/cycles), export, import, init, list, quickstart, ready, show, stats, update\n\n**Commands Not Requiring Emacs Implementation**:\n- completion (Emacs has its own completion system)\n- help (covered by Emacs help system)\n- version (not essential; could be shown in beads main menu if needed)\n\n**Note on Global Flags**:\nThe bd CLI now has a --no-daemon flag that should be supported in all transient menus alongside existing global flags (--actor, --db, --json, --no-auto-flush, --no-auto-import).","status":"open","priority":1,"issue_type":"epic","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:14.807119378+02:00"}
{"id":"beads.el-10","title":"Fix missing C and U key bindings in beads.el-list","description":"The beads.el-list buffer is missing C (create) and U (update) key bindings. Need to add these to the keymap and connect to beads.el-create and beads.el-update transient menus.","status":"closed","priority":1,"issue_type":"bug","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:14.834386131+02:00","closed_at":"2025-10-16T22:22:48.35596095+02:00"}
{"id":"beads.el-11","title":"Fix beads.el-list-show to call beads.el-show","description":"The beads.el-list-show function has a TODO and doesn't actually call beads.el-show. Pressing RET on an issue shows an error instead of displaying issue details.","status":"closed","priority":1,"issue_type":"bug","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:14.842551692+02:00","closed_at":"2025-10-16T22:22:48.382172553+02:00"}
{"id":"beads.el-12","title":"Add tests for beads.el-list key bindings (C, U, RET)","description":"Add comprehensive tests for the new C (create), U (update), and fixed RET (show) key bindings in beads.el-list-test.el","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:14.850901165+02:00","closed_at":"2025-10-16T22:22:48.407502144+02:00"}
{"id":"beads.el-13","title":"Add support for multiline editing in beads.el-create description","description":"The beads.el-create transient menu has a 'Description (multiline)' option bound to 'M', but the multiline editing buffer doesn't follow Emacs conventions properly. Should use a proper temporary buffer mode and consider integration with markdown-mode if available.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:14.859526346+02:00","closed_at":"2025-10-16T22:22:48.430184976+02:00"}
{"id":"beads.el-14","title":"Improve beads.el-list keybindings to follow dired/ibuffer conventions","description":"Current keybindings in beads.el-list-mode:\n- 'C' for create (uppercase) is unusual, should consider 'c' or '+'\n- 'c' for update is confusing (usually 'c' means create)\n- Consider 'e' or 'RET' for update/edit (edit is more intuitive)\n- Consider standard Emacs keybindings like 'd' for delete/close\n- 'M/U' for mark all/unmark all should be '* !' and 'U' or '* u'\n- Add 'S' for sorting options\n- Consider 'w' for copy issue ID (common in Emacs)","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:14.868665032+02:00","closed_at":"2025-10-16T22:22:48.455069957+02:00"}
{"id":"beads.el-15","title":"Add filtering and searching capabilities to beads.el-list","description":"beads.el-list should support:\n- '/' or 's' for incremental search/filter (like ibuffer)\n- Filter by status, priority, type\n- Clear filters with '|' or similar\n- Show active filters in mode-line\n- Consider integration with consult for advanced filtering","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:14.877483235+02:00","closed_at":"2025-10-16T22:22:48.481167684+02:00"}
{"id":"beads.el-16","title":"Add bulk operations for marked issues in beads.el-list","description":"Currently beads.el-list supports marking issues (m/u/M/U) but no bulk operations. Add:\n- 'B' prefix for bulk operations (like Magit)\n- 'B u' - bulk update (status/priority)\n- 'B c' - bulk close\n- 'B d' - bulk dependency operations\n- Show count of marked issues in mode-line\n- Consider confirmation prompts for destructive operations","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:14.885244369+02:00","closed_at":"2025-10-17T12:08:58.243495684Z"}
{"id":"beads.el-17","title":"Add navigation keybindings in beads.el-show buffers","description":"beads.el-show currently has basic navigation (n/p for sections, RET for references). Add:\n- '[' and ']' for prev/next beads.el-N reference (like compilation-mode)\n- 'TAB' to jump to next clickable element\n- 'S-TAB' for previous clickable element\n- 'o' to open reference in other window\n- 'v' to visit reference file if it's a file path\n- Consider integration with outline-mode for section folding","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:14.892778046+02:00","closed_at":"2025-10-16T22:22:48.533955892+02:00"}
{"id":"beads.el-18","title":"Improve transient menu keybindings to avoid conflicts","description":"Current transient menus have some keybinding issues:\n- beads.el-update uses 'G' for design (unusual, conflicts with Magit's 'G' for refresh)\n- Lowercase/uppercase letter usage is inconsistent\n- Consider using prefixes for related operations (like 'f' prefix for fields)\n- Document why specific keys were chosen in comments\n- Follow transient.el best practices from Magit","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:14.900517202+02:00","closed_at":"2025-10-16T22:22:48.55853623+02:00"}
{"id":"beads.el-19","title":"Add completion and history for beads commands","description":"Emacs should provide better completion for:\n- Issue IDs with metadata in annotations (status, title preview)\n- Dependency types\n- Status/priority/type values\n- History for previously entered values\n- Consider embark integration for issue IDs\n- Add completing-read metadata categories for better integration with vertico/ivy/helm","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:14.90958287+02:00","closed_at":"2025-10-16T22:22:48.584587622+02:00"}
{"id":"beads.el-2","title":"beads.el: Core package infrastructure and utilities","description":"Set up the foundational infrastructure for beads.el package.\n\nTasks:\n- Create lisp/ directory structure\n- Set up beads.el main file with package metadata\n- Implement bd CLI process wrapper functions (sync and async)\n- Add JSON parsing utilities for bd command output\n- Implement project.el integration for finding .beads directory\n- Add error handling and logging utilities\n- Create customization group for user settings\n- Set up autoload cookies\n\nDependencies:\n- Emacs 27.1+ (for transient, project.el, json.el)\n- transient library\n- json.el (built-in)","acceptance_criteria":"## Acceptance Criteria\n\n### Core Functionality\n- [ ] Package loads without errors in Emacs 27.1+\n- [ ] Customization group 'beads' is defined with all user options\n- [ ] Autoload cookies properly set for public commands\n- [ ] bd CLI executable is found and validated\n\n### Process Wrapper Functions\n- [ ] Synchronous bd command execution with JSON parsing\n- [ ] Asynchronous bd command execution with callbacks\n- [ ] Proper error handling for missing bd executable\n- [ ] Proper error handling for invalid JSON responses\n- [ ] Timeout handling for long-running commands\n- [ ] Support for all global flags (--actor, --db, etc.)\n\n### JSON Utilities\n- [ ] Parse bd list/show/ready/blocked output correctly\n- [ ] Handle malformed JSON gracefully\n- [ ] Extract all issue fields (id, title, status, priority, etc.)\n- [ ] Support for dependency tree JSON structure\n\n### Project Integration\n- [ ] Automatically find .beads directory using project.el\n- [ ] Fall back to searching up directory tree if no project\n- [ ] Cache project root for performance\n- [ ] Support multiple projects in same Emacs session\n\n### Error Handling \u0026 Logging\n- [ ] User-friendly error messages displayed in echo area\n- [ ] Optional debug logging to *beads-debug* buffer\n- [ ] Validation of required parameters before command execution\n\n## Test Coverage (ERT)\nTests must live in lisp/test/ directory and provide:\n\n- [ ] **test/beads-process-test.el**\n  - Mock bd command execution with fake responses\n  - Test JSON parsing with valid and invalid input\n  - Test error handling for command failures\n  - Test timeout behavior\n  - Test global flag construction\n\n- [ ] **test/beads-project-test.el**\n  - Test project root detection in various scenarios\n  - Test .beads directory discovery\n  - Test fallback behavior when no project found\n  - Test multiple project handling\n\n- [ ] **test/beads-utils-test.el**\n  - Test utility functions (string parsing, validation, etc.)\n  - Test customization variable handling\n  - Test path construction\n\nAll tests must pass with 'make test' or equivalent command.\nTest coverage should be \u003e80% for core utility functions.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:14.919707472+02:00","closed_at":"2025-10-16T22:22:48.609625695+02:00","dependencies":[{"issue_id":"beads.el-2","depends_on_id":"beads.el-1","type":"discovered-from","created_at":"2025-10-22T19:07:36.149365194+02:00","created_by":"import"}]}
{"id":"beads.el-21","title":"Add visual dependency graph view","description":"Create a graphical view of issue dependencies:\n- Use graphviz/dot to generate dependency graphs\n- Interactive graph navigation (click to jump to issues)\n- Highlight critical paths\n- Filter graph by issue type, status, priority\n- Export graph to image formats\n- Consider integration with org-roam-ui style visualization","status":"closed","priority":3,"issue_type":"feature","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:14.929155137+02:00","closed_at":"2025-10-16T22:22:48.661170143+02:00"}
{"id":"beads.el-22","title":"Add eldoc support for beads issue references","description":"When cursor is on a beads.el-N reference, eldoc should show:\n- Issue title and status in echo area\n- Full issue metadata in eldoc buffer\n- Works in all modes (code comments, org files, markdown, etc.)\n- Cache issue data for performance\n- Update cache when issues are modified","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:14.93718886+02:00"}
{"id":"beads.el-23","title":"Add quickstart command integration","description":"The bd CLI has a 'quickstart' command that's not exposed in beads.el. Add:\n- beads.el-quickstart command to show tutorial\n- Display in a special buffer with navigation\n- Interactive tutorial steps\n- Help new users discover features\n- Link to documentation","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:14.946378862+02:00","closed_at":"2025-10-16T22:22:48.713522751+02:00"}
{"id":"beads.el-24","title":"beads.el: Implement bd compact command","description":"Implement Emacs interface for the 'bd compact' command.\n\nThe bd compact command uses semantic summarization to reduce database size by compacting old closed issues. This is permanent graceful decay where original content is discarded.\n\n**Features:**\n- Two compression tiers:\n  - Tier 1: Semantic compression (30 days closed, 70% reduction)\n  - Tier 2: Ultra compression (90 days closed, 95% reduction)\n- Parallel processing with configurable workers\n- Batch processing with configurable batch size\n- Preview mode with --dry-run\n- Statistics display\n- Force compact specific issues\n\n**Implementation:**\n- Create beads-compact.el module\n- Transient menu with all flags:\n  - --all: Process all candidates\n  - --dry-run: Preview without compacting\n  - --stats: Show compaction statistics\n  - --id: Compact specific issue\n  - --force: Force compact (bypass checks, requires --id)\n  - --tier: Compaction tier (1 or 2)\n  - --batch-size: Issues per batch\n  - --workers: Parallel workers\n- Display results in dedicated buffer\n- Show before/after statistics\n- Confirmation prompt for destructive operations","design":"Implement Emacs transient interface for `bd compact` command.\n\n## Command Reference\n\nFrom beads-reference/README.md:\n- `bd compact` - Compact old closed issues using semantic summarization\n  - Two compression tiers: tier 1 (30 days, 70% reduction), tier 2 (90 days, 95% reduction)\n  - Parallel processing with configurable workers\n  - Batch processing with configurable batch size\n  - Preview mode with --dry-run\n  - Statistics display\n\n## Transient Menu Preview\n\n```\nCompact Issues\n────────────────────────────────────────────────────────────\n\nArguments\n -a, --all              Process all candidates for compaction\n -n, --dry-run          Preview without actually compacting\n -s, --stats            Show compaction statistics\n -i, --id=\u003cissue-id\u003e    Compact specific issue\n -f, --force            Force compact (bypass checks, requires --id)\n -t, --tier=\u003cn\u003e         Compaction tier (1 or 2, default: 1)\n -b, --batch-size=\u003cn\u003e   Issues per batch (default: 10)\n -w, --workers=\u003cn\u003e      Parallel workers (default: 4)\n\nActions\n c  Compact with current settings\n p  Preview candidates\n s  Show statistics\n r  Reset\n q  Quit\n```\n\n## Implementation Notes\n\n**Module:** beads-compact.el\n\n**State Variables:**\n- `beads-compact--all` - Process all candidates flag\n- `beads-compact--dry-run` - Preview mode flag\n- `beads-compact--stats` - Show statistics flag\n- `beads-compact--id` - Specific issue ID\n- `beads-compact--force` - Force flag\n- `beads-compact--tier` - Tier (1 or 2)\n- `beads-compact--batch-size` - Batch size\n- `beads-compact--workers` - Worker count\n\n**Commands:**\n- `beads-compact--execute` - Run compaction\n- `beads-compact--preview` - Preview candidates\n- `beads-compact--show-stats` - Display statistics\n- `beads-compact--reset` - Reset state\n\n**Validation:**\n- Force requires --id\n- Tier must be 1 or 2\n- Batch size and workers must be positive integers\n- Confirmation prompt for destructive operations\n\n**Output:**\n- Display results in `*beads-compact*` buffer\n- Show before/after statistics\n- List compacted issues with space savings\n\n**Context Awareness:**\n- From show buffer: default to current issue ID\n- From list buffer: operate on marked issues or prompt\n\n**Key Bindings in beads-main:**\n- `C` - Launch beads-compact menu","acceptance_criteria":"- [ ] Transient menu beads-compact defined\n- [ ] All flags supported (--all, --dry-run, --stats, --id, --force, --tier, --batch-size, --workers)\n- [ ] Preview mode shows candidates before compacting\n- [ ] Statistics display in formatted buffer\n- [ ] Confirmation prompt for destructive operations\n- [ ] Results displayed with before/after stats\n- [ ] Context-aware: can compact current issue from show buffer\n- [ ] ERT tests in test/beads-compact-test.el\n- [ ] Autoload entry in beads.el\n- [ ] Menu entry in beads-main.el\n- [ ] Integration tests added following pattern in lisp/test/beads-delete-test.el:260-270 (marked with :tags '(integration))","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:26:43.121088214+02:00","dependencies":[{"issue_id":"beads.el-24","depends_on_id":"beads.el-1","type":"discovered-from","created_at":"2025-10-22T19:07:36.158892761+02:00","created_by":"import"}],"comments":[{"id":1,"issue_id":"beads.el-24","author":"roman","text":"**Context-Aware Invocation Requirements:**\n\nThe beads-compact command should support two invocation patterns:\n\n1. **Direct invocation with M-x beads-compact**: \n   - Prompts for issue ID when --id flag is used\n   - Shows all candidates when using --all or --dry-run\n\n2. **Context-aware invocation from buffers**:\n   - In beads-list-mode: detect issue ID from current line\n   - In beads-show-mode: detect issue ID from buffer name\n   - Pre-populate the --id field in the transient menu\n\nThis follows the pattern established in beads-update.el and beads-close.el. See beads--detect-context-issue-id and beads-list--get-issue-id-at-point for reference implementations.","created_at":"2025-10-22T17:07:36Z"}]}
{"id":"beads.el-25","title":"beads.el: Implement bd daemon command","description":"Implement Emacs interface for the 'bd daemon' command.\n\nThe bd daemon command runs a background sync daemon that automatically synchronizes issues with git remote at configurable intervals.\n\n**Features:**\n- Start daemon with auto-commit/push capabilities\n- Stop running daemon\n- Check daemon status\n- Configurable sync interval\n- Custom log file path\n- Automatic JSONL export/import\n- Pull remote changes periodically\n\n**Implementation:**\n- Create beads-daemon.el module or add to beads-misc.el\n- Transient menu with all flags:\n  - --auto-commit: Automatically commit changes\n  - --auto-push: Automatically push commits\n  - --interval: Sync check interval (duration)\n  - --log: Log file path\n  - --status: Show daemon status\n  - --stop: Stop running daemon\n- Display daemon status in modeline or dedicated buffer\n- Show log output in buffer\n- Start/stop controls","acceptance_criteria":"- [ ] Command beads-daemon-start implemented\n- [ ] Command beads-daemon-stop implemented\n- [ ] Command beads-daemon-status implemented\n- [ ] All flags supported (--auto-commit, --auto-push, --interval, --log)\n- [ ] Daemon status displayed (running/stopped, last sync time)\n- [ ] Log output viewable in buffer\n- [ ] Modeline indicator for daemon status (optional)\n- [ ] ERT tests in test/beads-daemon-test.el\n- [ ] Autoload entries in beads.el\n- [ ] Menu entry in beads-main.el","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:14.963148132+02:00","dependencies":[{"issue_id":"beads.el-25","depends_on_id":"beads.el-1","type":"discovered-from","created_at":"2025-10-22T19:07:36.16849211+02:00","created_by":"import"}]}
{"id":"beads.el-26","title":"beads.el: Implement bd delete command","description":"Implement Emacs interface for the 'bd delete' command.\n\nThe bd delete command permanently deletes an issue and cleans up all references to it. This is a destructive operation that:\n1. Removes all dependency links (any type, both directions)\n2. Updates text references to '[deleted:ID]' in directly connected issues\n3. Deletes the issue from the database\n\n**Implementation:**\n- Add to beads-misc.el or create beads-delete.el\n- Transient menu with flags:\n  - -f/--force: Actually delete (without this, shows preview)\n- Preview mode shows:\n  - Issue details\n  - All dependencies that will be removed\n  - All text references that will be updated\n- Confirmation prompt with detailed warning\n- Display results after deletion\n- Context-aware: can delete current issue from show/list buffer","acceptance_criteria":"- [ ] Command beads-delete implemented\n- [ ] Flag --force supported\n- [ ] Preview mode shows impact before deletion\n- [ ] Strong confirmation prompt (requires typing 'yes' or issue ID)\n- [ ] Display dependencies that will be removed\n- [ ] Display text references that will be updated\n- [ ] Results displayed after deletion\n- [ ] Context-aware: works from show/list buffers\n- [ ] Refresh all buffers after deletion\n- [ ] ERT tests in test/beads-delete-test.el\n- [ ] Autoload entry in beads.el\n- [ ] Menu entry in beads-main.el","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:14.971553876+02:00","closed_at":"2025-10-19T14:25:25.605984984Z","dependencies":[{"issue_id":"beads.el-26","depends_on_id":"beads.el-1","type":"discovered-from","created_at":"2025-10-22T19:07:36.17834953+02:00","created_by":"import"}]}
{"id":"beads.el-27","title":"beads.el: Implement bd label command and subcommands","description":"Implement Emacs interface for the 'bd label' command and all subcommands.\n\nThe bd label command manages issue labels with four subcommands:\n1. **label add** - Add a label to an issue\n2. **label remove** - Remove a label from an issue\n3. **label list** - List labels for a specific issue\n4. **label list-all** - List all unique labels in the database\n\n**Implementation:**\n- Create beads-label.el module\n- Parent transient menu beads-label with subcommands\n- beads-label-add: prompt for issue ID and label name\n- beads-label-remove: prompt for issue ID and label (with completion)\n- beads-label-list: show labels for issue in buffer\n- beads-label-list-all: show all labels in tabulated-list buffer\n- Display labels in beads-list and beads-show buffers\n- Support multiple labels per issue\n- Label completion from existing labels","design":"Implement Emacs transient interface for `bd label` command and subcommands.\n\n## Command Reference\n\nFrom beads-reference/README.md:\n- `bd label add \u003cissue-id\u003e \u003clabel\u003e` - Add a label to an issue\n- `bd label remove \u003cissue-id\u003e \u003clabel\u003e` - Remove a label from an issue\n- `bd label list \u003cissue-id\u003e` - List labels for a specific issue\n- `bd label list-all` - List all unique labels in the database with counts\n\nLabels support filtering in `bd list`:\n- `--label backend,auth` - AND: must have ALL labels\n- `--label-any frontend,ui` - OR: must have AT LEAST ONE label\n\n## Transient Menu Preview\n\n### Parent Menu (beads-label)\n\n```\nLabel Management\n────────────────────────────────────────────────────────────\n\nIssue Labels\n a  Add label to issue\n r  Remove label from issue\n l  List labels for issue\n\nLabel Catalog\n L  List all labels\n \nActions on Current Issue (beads-show-mode or beads-list-mode)\n +  Add label to this issue\n -  Remove label from this issue\n =  Show labels for this issue\n\nq  Quit\n```\n\n### Add Label (beads-label-add)\n\n```\nAdd Label\n────────────────────────────────────────────────────────────\n\nRequired\n i  Issue ID      \u003cprompt or use current\u003e\n l  Label         \u003cprompt with completion\u003e\n\nActions\n a  Add label\n p  Preview\n r  Reset\n q  Quit\n```\n\n### Remove Label (beads-label-remove)\n\n```\nRemove Label\n────────────────────────────────────────────────────────────\n\nRequired\n i  Issue ID      \u003cprompt or use current\u003e\n l  Label         \u003ccompletion from issue's labels\u003e\n\nActions\n r  Remove label\n p  Preview\n x  Reset\n q  Quit\n```\n\n### List All Labels (beads-label-list-all)\n\nOpens `*beads-labels*` buffer in tabulated-list-mode:\n\n```\nLabel                Count\n──────────────────────────\nbackend                 12\nfrontend                 8\nurgent                   3\nbug                     15\nfeature                  9\ndocumentation            4\n```\n\n- Sortable by label name or count\n- Actions: `RET` to filter issues by label\n- Refresh with `g`\n\n## Implementation Notes\n\n**Module:** beads-label.el\n\n**Parent Menu:**\n- `beads-label` - Main transient prefix\n\n**Subcommands:**\n- `beads-label-add` - Add label (prompts for issue ID and label)\n- `beads-label-remove` - Remove label (prompts for issue ID and label)\n- `beads-label-list` - List labels for issue\n- `beads-label-list-all` - Show all labels in tabulated buffer\n\n**Context-Aware Convenience Commands:**\n- `beads-label-add-to-current` - Add label to current issue\n- `beads-label-remove-from-current` - Remove label from current issue\n- `beads-label-show-current` - Show labels for current issue\n\n**State Variables:**\n- `beads-label--issue-id` - Target issue ID\n- `beads-label--label` - Label name\n\n**Completion:**\n- Label completion uses existing labels from database\n- Retrieve via: `bd label list-all --json | jq -r '.[] | .label'`\n- Cache completion candidates with TTL\n\n**Display in Other Buffers:**\n- In beads-list: Add \"Labels\" column showing comma-separated labels\n- In beads-show: Display labels section with colorized tags\n- Optional: Use different colors for different labels\n\n**Label Colorization:**\n- Compute label color from hash of label string\n- Use `forge-topic-label` face as base\n- Apply subtle color variations for visual distinction\n\n**Key Bindings:**\n- In beads-main: `l` to open beads-label menu\n- In beads-show: `l` for label menu, `+`/`-` for quick add/remove\n- In beads-list: `l` for label menu on current/marked items\n\n**Validation:**\n- Issue ID must be valid and exist\n- Label name must be non-empty\n- Confirmation for batch operations on marked items","acceptance_criteria":"- [ ] Parent transient menu beads-label defined\n- [ ] Command beads-label-add implemented\n- [ ] Command beads-label-remove implemented\n- [ ] Command beads-label-list implemented\n- [ ] Command beads-label-list-all implemented\n- [ ] Label completion uses existing labels\n- [ ] Labels displayed in list buffer (new column)\n- [ ] Labels displayed in show buffer\n- [ ] Colorized label display (optional)\n- [ ] Context-aware: operates on current issue\n- [ ] ERT tests in test/beads-label-test.el\n- [ ] Autoload entries in beads.el\n- [ ] Menu entry in beads-main.el\n- [ ] Integration tests added following pattern in lisp/test/beads-delete-test.el:260-270 (marked with :tags '(integration))","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:27:10.75451001+02:00","dependencies":[{"issue_id":"beads.el-27","depends_on_id":"beads.el-1","type":"discovered-from","created_at":"2025-10-22T19:07:36.188014766+02:00","created_by":"import"}],"comments":[{"id":2,"issue_id":"beads.el-27","author":"roman","text":"**Context-Aware Invocation Requirements:**\n\nThe beads-label command and all subcommands should support two invocation patterns:\n\n1. **Direct invocation with M-x beads-label**: \n   - Opens transient menu with all subcommands\n   - Prompts for issue ID when needed\n   - Provides label completion from existing labels\n\n2. **Context-aware invocation from buffers**:\n   - In beads-list-mode: detect issue ID from current line\n   - In beads-show-mode: detect issue ID from buffer name\n   - Pre-populate issue ID in add/remove/list operations\n   - Allow keyboard shortcuts in list view (e.g., 'l a' for add label)\n\nThis follows the pattern established in beads-update.el and beads-close.el. See beads--detect-context-issue-id and beads-list--get-issue-id-at-point for reference implementations.\n\n**Integration with list/show buffers:**\n- Display labels in beads-list-mode columns\n- Display labels in beads-show-mode header\n- Refresh buffers after label changes","created_at":"2025-10-22T17:07:36Z"}]}
{"id":"beads.el-28","title":"beads.el: Implement bd rename-prefix command","description":"Implement Emacs interface for the 'bd rename-prefix' command.\n\nThe bd rename-prefix command renames the issue prefix for all issues in the database, updating:\n- All issue IDs\n- All text references across all fields\n- All dependency links\n\n**Prefix validation rules:**\n- Max length: 8 characters\n- Allowed: lowercase letters, numbers, hyphens\n- Must start with a letter\n- Must end with a hyphen (e.g., 'kw-', 'work-')\n\n**Implementation:**\n- Add to beads-misc.el\n- Transient menu with:\n  - New prefix input with validation\n  - --dry-run flag\n- Preview mode shows old-\u003enew ID mappings\n- Strong confirmation prompt\n- Display results with mapping table\n- This is a destructive operation","acceptance_criteria":"- [ ] Command beads-rename-prefix implemented\n- [ ] Flag --dry-run supported\n- [ ] Prefix validation (max 8 chars, lowercase, starts with letter, ends with hyphen)\n- [ ] Preview shows old-\u003enew ID mappings\n- [ ] Strong confirmation prompt (requires typing new prefix)\n- [ ] Results displayed with mapping table\n- [ ] Warning about external references (GitHub, docs, commits)\n- [ ] Invalidate completion cache after rename\n- [ ] Refresh all buffers after rename\n- [ ] ERT tests in test/beads-rename-prefix-test.el\n- [ ] Autoload entry in beads.el\n- [ ] Menu entry in beads-main.el","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:14.989086993+02:00","dependencies":[{"issue_id":"beads.el-28","depends_on_id":"beads.el-1","type":"discovered-from","created_at":"2025-10-22T19:07:36.197711118+02:00","created_by":"import"}]}
{"id":"beads.el-29","title":"beads.el: Implement bd renumber command","description":"Implement Emacs interface for the 'bd renumber' command.\n\nThe bd renumber command renumbers all issues sequentially to eliminate gaps in the ID space, updating:\n- All issue IDs (starting from 1, keeping chronological order)\n- All dependency links\n- All text references in all fields\n\n**Risks:**\n- May break external references (GitHub issues, docs, commits)\n- Git history may become confusing\n- Cannot be undone (backup recommended)\n\n**Implementation:**\n- Add to beads-misc.el\n- Transient menu with flags:\n  - --dry-run: Preview changes\n  - --force: Actually perform renumbering\n- Preview shows old-\u003enew ID mappings\n- Very strong confirmation prompt with warnings\n- Display results with complete mapping table\n- Suggest git backup before execution","acceptance_criteria":"- [ ] Command beads-renumber implemented\n- [ ] Flags --dry-run and --force supported\n- [ ] Preview shows complete old-\u003enew ID mappings\n- [ ] Very strong confirmation (requires typing 'renumber')\n- [ ] Warning about risks displayed prominently\n- [ ] Suggestion to backup git repo before proceeding\n- [ ] Results displayed with mapping table\n- [ ] Invalidate completion cache after renumber\n- [ ] Refresh all buffers after renumber\n- [ ] ERT tests in test/beads-renumber-test.el\n- [ ] Autoload entry in beads.el\n- [ ] Menu entry in beads-main.el","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:14.997450162+02:00","dependencies":[{"issue_id":"beads.el-29","depends_on_id":"beads.el-1","type":"discovered-from","created_at":"2025-10-22T19:07:36.208336139+02:00","created_by":"import"}]}
{"id":"beads.el-3","title":"beads.el: Implement tabulated-list-mode for issue lists","description":"Create tabulated-list-mode based buffers for displaying issue lists.\n\nFeatures:\n- beads.el-list-mode derived from tabulated-list-mode\n- Configurable columns: ID, Status, Priority, Type, Title\n- Sortable columns (click header or keyboard shortcuts)\n- Support for bd list, bd ready, bd blocked commands\n- Keyboard navigation (n/p, RET to show details)\n- Mark/unmark functionality for batch operations\n- Refresh capability (g key)\n- Filter/narrow by status, priority, type\n- Colorize status and priority fields\n- Show issue count in mode line\n\nBuffers:\n- *beads-list* - All issues\n- *beads-ready* - Ready work\n- *beads-blocked* - Blocked issues\n\nCommands:\n- beads.el-list\n- beads.el-ready  \n- beads.el-blocked","acceptance_criteria":"## Acceptance Criteria\n\n### Display Functionality\n- [ ] beads.el-list-mode correctly inherits from tabulated-list-mode\n- [ ] Columns display: ID, Status, Priority, Type, Title\n- [ ] Column widths appropriate and configurable\n- [ ] Header line displays and is interactive\n\n### Data Population\n- [ ] bd list --json output correctly parsed into table entries\n- [ ] bd ready --json output displayed in *beads-ready* buffer\n- [ ] bd blocked --json output displayed in *beads-blocked* buffer\n- [ ] Empty results handled gracefully with message\n\n### Sorting \u0026 Navigation\n- [ ] Click column headers to sort (or keyboard shortcut)\n- [ ] n/p navigate to next/previous issue\n- [ ] RET on issue opens detail view (beads.el-show)\n- [ ] TAB cycles through sortable columns\n\n### Actions on Items\n- [ ] u key updates current issue (opens transient)\n- [ ] c key closes current issue\n- [ ] s key shows issue details\n- [ ] q key quits buffer\n\n### Mark/Unmark for Batch Operations\n- [ ] m marks current issue\n- [ ] u unmarks current issue\n- [ ] M marks all issues\n- [ ] U unmarks all issues\n- [ ] Marked issues can be closed in batch\n\n### Refresh \u0026 Filter\n- [ ] g key refreshes buffer from bd CLI\n- [ ] Filter by status (/) with completion\n- [ ] Filter by priority with completion\n- [ ] Filter by type with completion\n- [ ] Clear filters\n\n### Visual Styling\n- [ ] Status field colorized (open=blue, in_progress=yellow, blocked=red, closed=gray)\n- [ ] Priority colorized (0=red, 1=orange, 2=default, 3-4=gray)\n- [ ] Mode line shows issue count and filter status\n\n## Test Coverage (ERT)\nTests in lisp/test/beads-list-test.el:\n\n- [ ] **Buffer Creation**\n  - Test buffer creation and mode activation\n  - Test buffer naming\n  - Test switching between list/ready/blocked buffers\n\n- [ ] **Data Parsing**\n  - Mock bd list/ready/blocked JSON responses\n  - Test table entry generation from JSON\n  - Test handling of empty results\n  - Test handling of malformed data\n\n- [ ] **Sorting**\n  - Test sorting by each column\n  - Test ascending/descending order\n  - Test sort stability\n\n- [ ] **Navigation**\n  - Test cursor movement (n/p)\n  - Test RET opening show buffer\n  - Test actions on current item\n\n- [ ] **Mark/Unmark**\n  - Test marking single items\n  - Test marking all items\n  - Test unmarking\n  - Test batch operations on marked items\n\n- [ ] **Filtering**\n  - Test filter by status/priority/type\n  - Test filter combinations\n  - Test filter clearing\n  - Test mode line updates\n\nTest coverage should be \u003e75% for list mode functionality.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:15.006436256+02:00","closed_at":"2025-10-16T22:22:48.73771921+02:00","dependencies":[{"issue_id":"beads.el-3","depends_on_id":"beads.el-1","type":"discovered-from","created_at":"2025-10-22T19:07:36.218604457+02:00","created_by":"import"},{"issue_id":"beads.el-3","depends_on_id":"beads.el-2","type":"blocks","created_at":"2025-10-22T19:07:36.228007405+02:00","created_by":"import"}]}
{"id":"beads.el-30","title":"beads.el: Implement bd reopen command","description":"Implement Emacs interface for the 'bd reopen' command.\n\nThe bd reopen command reopens closed issues by setting status to 'open' and clearing the closed_at timestamp. This is more explicit than 'bd update --status open' and emits a Reopened event.\n\n**Features:**\n- Reopen single or multiple issues\n- Optional reason for reopening\n- Batch reopen from marked items in list buffer\n\n**Implementation:**\n- Create beads-reopen.el or add to beads-close.el\n- Transient menu with flags:\n  - -r/--reason: Reason for reopening\n- Support multiple issue IDs\n- Context-aware: reopen from list/show buffers\n- Batch reopen marked issues\n- Display results","design":"Implement Emacs transient interface for `bd reopen` command.\n\n## Command Reference\n\nFrom beads reference:\n- `bd reopen \u003cissue-id\u003e...` - Reopen closed issues\n- More explicit than `bd update --status open`\n- Emits a Reopened event\n- Clears closed_at timestamp\n- Optional --reason flag for context\n\n## Transient Menu Preview\n\n```\nReopen Issues\n────────────────────────────────────────────────────────────\n\nArguments\n -r, --reason=\u003ctext\u003e    Reason for reopening\n\nActions\n r  Reopen issue(s)\n p  Preview\n x  Reset\n q  Quit\n```\n\n## Implementation Notes\n\n**Module:** beads-reopen.el (or extend beads-close.el)\n\n**State Variables:**\n- `beads-reopen--issue-ids` - List of issue IDs to reopen\n- `beads-reopen--reason` - Optional reason string\n\n**Commands:**\n- `beads-reopen` - Main transient prefix\n- `beads-reopen--execute` - Execute reopen operation\n- `beads-reopen--preview` - Preview command\n- `beads-reopen--reset` - Reset state\n\n**Context Awareness:**\n1. **From beads-show buffer:**\n   - Default to current issue ID\n   - Pre-populate issue-ids with current issue\n   \n2. **From beads-list buffer:**\n   - If items are marked: use all marked issues\n   - Otherwise: use current line's issue\n   \n3. **From anywhere else:**\n   - Prompt for issue ID(s) with completion\n\n**Multiple Issue Support:**\n- Accept comma-separated issue IDs\n- Accept space-separated issue IDs\n- Batch reopen all marked items in list buffer\n- Show count: \"Reopen 5 issues?\"\n\n**Validation:**\n- All issue IDs must be valid\n- Issues must be in 'closed' status\n- Warn if trying to reopen already-open issue\n\n**Confirmation:**\n- Single issue: No confirmation needed (quick action)\n- Multiple issues: Require confirmation\n- Show list of issues to be reopened in prompt\n\n**Output:**\n- Display results in message area for single issue\n- Display results in `*beads-output*` for multiple issues\n- Show: \"Reopened: bd-42, bd-43, bd-44\"\n\n**Refresh:**\n- Refresh beads-list buffer after reopen\n- Update beads-show buffer if showing reopened issue\n- Invalidate completion cache\n\n**Key Bindings:**\n- In beads-main: `R` to launch beads-reopen\n- In beads-show: `R` to reopen current issue\n- In beads-list: `R` to reopen current/marked issues\n\n**Comparison with bd update:**\n\n```\nbd update bd-42 --status open    # Generic status change\nbd reopen bd-42                   # Explicit reopen action\n```\n\nBenefits of separate `reopen` command:\n1. Clearer intent in git history (Reopened event)\n2. Single-purpose command for discoverability\n3. Could add reopen-specific validations\n4. Parallel to `close` command for symmetry\n\n**Integration with close:**\n- Similar UX to beads-close\n- Symmetric operations (close/reopen)\n- Could share validation logic\n- Consider placing in same module if code overlap is high","acceptance_criteria":"- [ ] Command beads-reopen implemented\n- [ ] Flag --reason supported (optional)\n- [ ] Support single issue ID\n- [ ] Support multiple issue IDs\n- [ ] Batch reopen from marked items in list buffer\n- [ ] Context-aware: works from show/list buffers\n- [ ] Confirmation prompt for batch operations\n- [ ] Results displayed\n- [ ] Refresh buffers after reopen\n- [ ] ERT tests in test/beads-reopen-test.el\n- [ ] Autoload entry in beads.el\n- [ ] Menu entry in beads-main.el\n- [ ] Integration tests added following pattern in lisp/test/beads-delete-test.el:260-270 (marked with :tags '(integration))","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:27:35.373943924+02:00","dependencies":[{"issue_id":"beads.el-30","depends_on_id":"beads.el-1","type":"discovered-from","created_at":"2025-10-22T19:07:36.236826178+02:00","created_by":"import"}],"comments":[{"id":3,"issue_id":"beads.el-30","author":"roman","text":"**Context-Aware Invocation Requirements:**\n\nThe beads-reopen command should support two invocation patterns:\n\n1. **Direct invocation with M-x beads-reopen**: \n   - Prompts for issue ID (with completion from closed issues)\n   - Opens transient menu with --reason flag\n   - Supports multiple issue IDs (space-separated)\n\n2. **Context-aware invocation from buffers**:\n   - In beads-list-mode: detect issue ID from current line\n   - In beads-show-mode: detect issue ID from buffer name\n   - Support batch reopen of marked issues in list buffer\n   - Pre-populate issue ID in transient menu\n\nThis follows the pattern established in beads-update.el and beads-close.el. See beads--detect-context-issue-id, beads-list--get-issue-id-at-point, and beads-list--get-marked-issues for reference implementations.\n\n**Note:** beads-reopen.el already exists but needs the transient menu interface. The current implementation may need refactoring to match this pattern.","created_at":"2025-10-22T17:07:36Z"}]}
{"id":"beads.el-31","title":"beads.el: Implement bd restore command","description":"Implement Emacs interface for the 'bd restore' command.\n\nThe bd restore command restores full history of a compacted issue from git version control. When an issue is compacted, the git commit hash is saved. This command:\n1. Reads the compacted_at_commit from the database\n2. Checks out that commit temporarily\n3. Reads the full issue from JSONL at that point in history\n4. Displays the full issue history\n5. Returns to the current git state\n\nThis is read-only and does not modify database or git state.\n\n**Implementation:**\n- Add to beads-compact.el or beads-misc.el\n- Simple command: beads-restore ISSUE-ID\n- Display restored issue in special buffer\n- Show full description, events, history\n- Indicate it's a historical view\n- Context-aware: can restore current compacted issue","acceptance_criteria":"- [ ] Command beads-restore implemented\n- [ ] Prompt for issue ID or detect from context\n- [ ] Check if issue is compacted\n- [ ] Error if issue is not compacted\n- [ ] Display restored issue in *beads-restore: ID* buffer\n- [ ] Show full historical content\n- [ ] Indicate this is a historical view (header banner)\n- [ ] Context-aware: works from show buffer\n- [ ] Handle git errors gracefully\n- [ ] ERT tests in test/beads-restore-test.el\n- [ ] Autoload entry in beads.el\n- [ ] Menu entry in beads-main.el","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:15.023107433+02:00","dependencies":[{"issue_id":"beads.el-31","depends_on_id":"beads.el-1","type":"discovered-from","created_at":"2025-10-22T19:07:36.244841889+02:00","created_by":"import"}]}
{"id":"beads.el-32","title":"beads.el: Implement bd sync command","description":"Implement Emacs interface for the 'bd sync' command.\n\nThe bd sync command synchronizes issues with git remote in a single operation:\n1. Export pending changes to JSONL\n2. Commit changes to git\n3. Pull from remote (with conflict resolution)\n4. Import updated JSONL\n5. Push local commits to remote\n\n**Features:**\n- One-command git sync workflow\n- Dry-run preview\n- Custom commit message\n- Skip pull or push (--no-pull, --no-push)\n- Display sync progress and results\n\n**Implementation:**\n- Add to beads-misc.el or create beads-sync.el\n- Transient menu with flags:\n  - --dry-run: Preview without making changes\n  - -m/--message: Custom commit message\n  - --no-pull: Skip pulling from remote\n  - --no-push: Skip pushing to remote\n- Display progress in steps\n- Show sync results (commits pulled/pushed)\n- Error handling for conflicts\n- Refresh all buffers after sync","acceptance_criteria":"- [ ] Command beads-sync implemented\n- [ ] All flags supported (--dry-run, -m/--message, --no-pull, --no-push)\n- [ ] Dry-run shows what would be synced\n- [ ] Progress display for each step\n- [ ] Results show commits pulled/pushed\n- [ ] Conflict handling with clear error messages\n- [ ] Custom commit message supported\n- [ ] Default commit message auto-generated\n- [ ] Refresh all buffers after sync\n- [ ] ERT tests in test/beads-sync-test.el\n- [ ] Autoload entry in beads.el\n- [ ] Menu entry in beads-main.el\n- [ ] Integration tests added following pattern in lisp/test/beads-delete-test.el:260-270 (marked with :tags '(integration))","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:15.031831983+02:00","closed_at":"2025-10-20T21:33:55.379338616+02:00","dependencies":[{"issue_id":"beads.el-32","depends_on_id":"beads.el-1","type":"discovered-from","created_at":"2025-10-22T19:07:36.252946293+02:00","created_by":"import"}]}
{"id":"beads.el-33","title":"beads.el: Implement bd compact command","description":"Implement Emacs interface for the bd compact command.\n\nThe compact command compacts old closed issues using semantic\nsummarization to save space. It has two tiers:\n- Tier 1: Issues closed 30+ days ago\n- Tier 2: Issues closed 90+ days ago\n\nFeatures:\n- Transient menu for compact command\n- Show preview of issues to be compacted before execution\n- Confirmation prompt with tier information\n- Display results (number of issues compacted per tier)\n- Refresh list buffers after compacting\n\nThis is a destructive operation that should require explicit user\nconfirmation.","acceptance_criteria":"## Acceptance Criteria\n\n### Command Implementation\n- [ ] beads-compact transient menu defined\n- [ ] Show preview of issues to be compacted (tier 1: 30+ days, tier 2: 90+ days)\n- [ ] Confirmation prompt with clear tier information\n- [ ] Execute bd compact command with --json flag\n- [ ] Display results showing number of issues compacted per tier\n- [ ] Refresh list buffers after compacting\n\n### User Experience\n- [ ] Strong confirmation required (destructive operation)\n- [ ] Clear warning about what will be compacted\n- [ ] Success/error messages displayed clearly\n- [ ] Integration with main beads transient menu\n\n### Testing\n- [ ] ERT tests for compact command execution\n- [ ] Test preview generation\n- [ ] Test confirmation flow\n- [ ] Test error handling\n- [ ] All tests passing","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:15.040477852+02:00","dependencies":[{"issue_id":"beads.el-33","depends_on_id":"beads.el-1","type":"parent-child","created_at":"2025-10-22T19:07:36.260998819+02:00","created_by":"import"}]}
{"id":"beads.el-35","title":"beads.el: Implement bd epic commands","description":"Implement Emacs interface for bd epic commands.\n\nThe bd epic command has two subcommands:\n1. epic status - Show epic completion status\n2. epic close-eligible - Close epics where all children are complete\n\nFeatures:\n- Parent transient menu: beads-epic\n- Subcommand: beads-epic-status\n  - Display epic completion status in special buffer\n  - Show progress for each epic (completed/total children)\n  - Visual progress indicators\n- Subcommand: beads-epic-close-eligible\n  - Show list of eligible epics for closing\n  - Confirmation before closing\n  - Bulk close all eligible epics\n  - Display results\n\nIntegration:\n- Add to main beads transient menu\n- Refresh buffers after epic operations\n- Consider special visualization for epic progress","acceptance_criteria":"## Acceptance Criteria\n\n### Command Implementation\n- [ ] beads-epic parent transient menu defined\n- [ ] beads-epic-status command implemented\n  - [ ] Execute bd epic status --json\n  - [ ] Display in special buffer with formatting\n  - [ ] Show progress for each epic (completed/total children)\n  - [ ] Visual progress indicators (progress bars or percentages)\n- [ ] beads-epic-close-eligible command implemented\n  - [ ] Execute bd epic close-eligible --json\n  - [ ] Show list of eligible epics\n  - [ ] Confirmation before closing\n  - [ ] Display results\n\n### User Experience\n- [ ] Clear display of epic progress\n- [ ] Easy to understand which epics are eligible for closing\n- [ ] Integration with main beads transient menu\n- [ ] Refresh buffers after operations\n\n### Testing\n- [ ] ERT tests for epic status command\n- [ ] Test progress calculation display\n- [ ] Test epic close-eligible command\n- [ ] Test error handling\n- [ ] All tests passing\n- [ ] Integration tests added following pattern in lisp/test/beads-delete-test.el:260-270 (marked with :tags '(integration))","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:15.04895249+02:00","dependencies":[{"issue_id":"beads.el-35","depends_on_id":"beads.el-1","type":"parent-child","created_at":"2025-10-22T19:07:36.26903463+02:00","created_by":"import"}]}
{"id":"beads.el-36","title":"beads.el: Implement bd label commands","description":"Implement Emacs interface for bd label commands.\n\nThe bd label command has four subcommands:\n1. label add - Add a label to an issue\n2. label list - List labels for an issue\n3. label list-all - List all unique labels in the database\n4. label remove - Remove a label from an issue\n\nFeatures:\n- Parent transient menu: beads-label\n- Subcommand: beads-label-add\n  - Context-aware: use current issue from list/show buffer\n  - Completion for existing labels\n  - Support for creating new labels\n- Subcommand: beads-label-list\n  - Display labels for an issue in minibuffer or buffer\n  - Context-aware\n- Subcommand: beads-label-list-all\n  - Display all unique labels in special buffer\n  - Show count of issues per label\n  - Clickable labels to filter issues\n- Subcommand: beads-label-remove\n  - Context-aware: use current issue\n  - Completion for labels on current issue\n  - Confirmation before removal\n\nIntegration:\n- Add to main beads transient menu\n- Show labels in list buffer (new column)\n- Show labels in show buffer\n- Refresh buffers after label operations\n- Invalidate completion cache after label changes","acceptance_criteria":"## Acceptance Criteria\n\n### Command Implementation\n- [ ] beads-label parent transient menu defined\n- [ ] beads-label-add command implemented\n  - [ ] Context-aware: uses current issue\n  - [ ] Completion for existing labels\n  - [ ] Support for creating new labels\n- [ ] beads-label-list command implemented\n  - [ ] Context-aware\n  - [ ] Display labels in minibuffer or buffer\n- [ ] beads-label-list-all command implemented\n  - [ ] Display all unique labels in buffer\n  - [ ] Show count of issues per label\n  - [ ] Clickable labels to filter issues\n- [ ] beads-label-remove command implemented\n  - [ ] Context-aware\n  - [ ] Completion for labels on current issue\n  - [ ] Confirmation before removal\n\n### Display Integration\n- [ ] Labels shown in list buffer (new column)\n- [ ] Labels shown in show buffer\n- [ ] Labels displayed with appropriate formatting\n\n### Cache Management\n- [ ] Invalidate completion cache after label changes\n- [ ] Refresh buffers after label operations\n\n### Testing\n- [ ] ERT tests for label add command\n- [ ] Test label list command\n- [ ] Test label list-all command\n- [ ] Test label remove command\n- [ ] Test context detection\n- [ ] Test cache invalidation\n- [ ] Test error handling\n- [ ] All tests passing\n- [ ] Integration tests added following pattern in lisp/test/beads-delete-test.el:260-270 (marked with :tags '(integration))","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:15.057052807+02:00","dependencies":[{"issue_id":"beads.el-36","depends_on_id":"beads.el-1","type":"parent-child","created_at":"2025-10-22T19:07:36.277534371+02:00","created_by":"import"}]}
{"id":"beads.el-37","title":"beads.el: Implement bd rename-prefix command","description":"Implement Emacs interface for the bd rename-prefix command.\n\nThe rename-prefix command renames the issue prefix for all issues in\nthe database (e.g., from \"bd\" to \"project\").\n\nFeatures:\n- Transient menu for rename-prefix\n- Show current prefix\n- Input field for new prefix with validation\n- Strong confirmation prompt showing:\n  - Current prefix\n  - New prefix\n  - Number of issues to be renamed\n- Display results (number of issues renamed)\n- Invalidate all caches after rename\n- Refresh all open buffers\n\nThis is a major operation that affects all issues and should have\nstrong confirmation with clear warnings about the impact.","acceptance_criteria":"## Acceptance Criteria\n\n### Command Implementation\n- [ ] beads-rename-prefix transient menu or command defined\n- [ ] Show current prefix\n- [ ] Input field for new prefix\n- [ ] Prefix validation (valid identifier format)\n- [ ] Strong confirmation prompt showing:\n  - [ ] Current prefix\n  - [ ] New prefix\n  - [ ] Number of issues affected\n- [ ] Execute bd rename-prefix command with --json flag\n- [ ] Display results (number of issues renamed)\n\n### Cache and Buffer Management\n- [ ] Invalidate all caches after rename\n- [ ] Refresh all open buffers with new prefix\n- [ ] Update buffer names for show buffers\n\n### User Experience\n- [ ] Strong confirmation with clear warnings\n- [ ] Explanation of impact\n- [ ] Integration with main beads transient menu\n\n### Testing\n- [ ] ERT tests for rename-prefix command\n- [ ] Test prefix validation\n- [ ] Test confirmation flow\n- [ ] Test cache invalidation\n- [ ] Test error handling\n- [ ] All tests passing\n- [ ] Integration tests added following pattern in lisp/test/beads-delete-test.el:260-270 (marked with :tags '(integration))","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:15.067304719+02:00","dependencies":[{"issue_id":"beads.el-37","depends_on_id":"beads.el-1","type":"parent-child","created_at":"2025-10-22T19:07:36.285549951+02:00","created_by":"import"}]}
{"id":"beads.el-38","title":"beads.el: Implement bd renumber command","description":"Implement Emacs interface for the bd renumber command.\n\nThe renumber command renumbers all issues sequentially to eliminate ID\ngaps (e.g., after deleting issues).\n\nFeatures:\n- Transient menu or direct command for renumber\n- Show preview of renumbering plan (old ID -\u003e new ID)\n- Strong confirmation prompt showing:\n  - Number of issues to be renumbered\n  - Impact (references in other issues, git history, etc.)\n- Display results (number of issues renumbered)\n- Invalidate all caches after renumber\n- Refresh all open buffers with updated IDs\n\nThis is a major operation that changes issue IDs and should have strong\nconfirmation with clear warnings about the impact on references and git\nhistory.","acceptance_criteria":"## Acceptance Criteria\n\n### Command Implementation\n- [ ] beads-renumber command/transient defined\n- [ ] Show preview of renumbering plan (old ID -\u003e new ID mapping)\n- [ ] Strong confirmation prompt showing:\n  - [ ] Number of issues to be renumbered\n  - [ ] Impact explanation (references, git history)\n- [ ] Execute bd renumber command with --json flag\n- [ ] Display results (number of issues renumbered)\n\n### Cache and Buffer Management\n- [ ] Invalidate all caches after renumber\n- [ ] Refresh all open buffers with updated IDs\n- [ ] Update buffer names for show buffers\n- [ ] Handle references to renamed issues\n\n### User Experience\n- [ ] Strong confirmation with clear warnings\n- [ ] Clear explanation of impact on git history and references\n- [ ] Integration with main beads transient menu\n\n### Testing\n- [ ] ERT tests for renumber command\n- [ ] Test preview generation\n- [ ] Test confirmation flow\n- [ ] Test cache invalidation\n- [ ] Test buffer updates\n- [ ] Test error handling\n- [ ] All tests passing\n- [ ] Integration tests added following pattern in lisp/test/beads-delete-test.el:260-270 (marked with :tags '(integration))","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:15.075955248+02:00","dependencies":[{"issue_id":"beads.el-38","depends_on_id":"beads.el-1","type":"parent-child","created_at":"2025-10-22T19:07:36.293605599+02:00","created_by":"import"}]}
{"id":"beads.el-39","title":"beads.el: Implement bd reopen command","description":"Implement Emacs interface for the bd reopen command.\n\nThe reopen command reopens one or more closed issues. This is more\nexplicit than using update --status open.\n\nFeatures:\n- Transient menu or direct command for reopen\n- Context-aware: use current issue from list/show buffer\n- Support for multiple issues (from marked items in list buffer)\n- Optional reason field (why reopening)\n- Confirmation prompt for batch operations\n- Display results (number of issues reopened)\n- Invalidate completion cache after reopen\n- Refresh list/show buffers\n\nThis should be quick and easy to use, as reopening is a common\noperation.","acceptance_criteria":"## Acceptance Criteria\n\n### Command Implementation\n- [ ] beads-reopen command/transient defined\n- [ ] Context-aware: uses current issue from list/show buffer\n- [ ] Support for single issue reopen\n- [ ] Support for multiple issues (marked items in list buffer)\n- [ ] Optional reason field (why reopening)\n- [ ] Execute bd reopen command with --json flag\n- [ ] Display results (number of issues reopened)\n\n### User Experience\n- [ ] Quick and easy to use (common operation)\n- [ ] Confirmation for batch operations\n- [ ] Clear success messages\n- [ ] Integration with main beads transient menu and buffer keybindings\n\n### Cache and Buffer Management\n- [ ] Invalidate completion cache after reopen\n- [ ] Refresh list/show buffers\n\n### Testing\n- [ ] ERT tests for reopen single issue\n- [ ] Test reopen multiple issues\n- [ ] Test context detection\n- [ ] Test reason field handling\n- [ ] Test cache invalidation\n- [ ] Test error handling\n- [ ] All tests passing\n- [ ] Integration tests added following pattern in lisp/test/beads-delete-test.el:260-270 (marked with :tags '(integration))","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:15.084809613+02:00","closed_at":"2025-10-20T09:54:08.576551079Z","dependencies":[{"issue_id":"beads.el-39","depends_on_id":"beads.el-1","type":"parent-child","created_at":"2025-10-22T19:07:36.301798296+02:00","created_by":"import"}]}
{"id":"beads.el-4","title":"beads.el: Issue detail view with markdown rendering","description":"Implement issue detail display buffer with markdown rendering.\n\nFeatures:\n- beads.el-show-mode derived from markdown-mode (or special-mode)\n- Display full issue details in formatted layout\n- Sections: metadata header, description, acceptance criteria, design, notes\n- Syntax highlighting for markdown content\n- Read-only by default with edit commands\n- Keybindings for common actions (u: update status, c: close, e: edit field)\n- Show dependency information\n- Display audit trail (created_at, updated_at, actor)\n- Link to related issues (clickable beads.el-N references)\n\nBuffer naming:\n- *beads-show: beads.el-N*\n\nCommands:\n- beads.el-show (prompt for ID or use at-point)\n- beads.el-show-at-point\n- beads.el-edit-field (enter edit mode for specific field)\n- beads.el-update-status\n- beads.el-close-issue\n\nResearch decisions:\n- markdown-mode vs org-mode vs special-mode with custom fontification\n- How to handle inline editing of fields\n- Displaying metadata alongside markdown","acceptance_criteria":"## Acceptance Criteria\n\n### Display \u0026 Rendering\n- [ ] beads.el-show-mode correctly defined (derived from markdown-mode or special-mode)\n- [ ] Buffer named *beads-show: beads.el-N* for issue beads.el-N\n- [ ] Metadata header displays: ID, Status, Priority, Type, Created/Updated dates\n- [ ] All text fields rendered with proper sections: Description, Acceptance Criteria, Design, Notes\n- [ ] Markdown syntax highlighting works correctly\n- [ ] Empty fields handled gracefully (not displayed or shown as empty)\n\n### Navigation \u0026 Links\n- [ ] beads.el-N references in text are clickable (jump to that issue)\n- [ ] Links work across all fields (description, notes, etc.)\n- [ ] n/p navigate to next/previous section\n- [ ] q quits and returns to previous buffer\n\n### Actions\n- [ ] u key opens update transient with current values\n- [ ] c key closes issue with reason prompt\n- [ ] e key edits field at point (context-aware)\n- [ ] d key shows dependency tree\n- [ ] g key refreshes issue from bd CLI\n\n### Field Editing\n- [ ] Inline editing for description field\n- [ ] Inline editing for acceptance criteria field\n- [ ] Inline editing for design field\n- [ ] Inline editing for notes field\n- [ ] Edits saved via bd update command\n- [ ] Confirmation before saving changes\n\n### Dependency Display\n- [ ] Dependencies section shows all deps with types\n- [ ] Clickable dependency links\n- [ ] Visual indication of dependency type (blocks, related, etc.)\n\n### Read-only Sections\n- [ ] Metadata header is read-only\n- [ ] Separation between read-only and editable regions clear\n- [ ] Attempt to edit read-only region shows helpful message\n\n## Test Coverage (ERT)\nTests in lisp/test/beads-show-test.el:\n\n- [ ] **Buffer Creation \u0026 Display**\n  - Test buffer creation for valid issue\n  - Test buffer naming\n  - Test error handling for non-existent issue\n  - Test mode activation\n\n- [ ] **Markdown Rendering**\n  - Test markdown syntax highlighting\n  - Test multi-line content rendering\n  - Test code blocks in markdown\n  - Test headers and lists\n\n- [ ] **Link Detection**\n  - Test beads.el-N reference detection\n  - Test link creation and navigation\n  - Test invalid reference handling\n\n- [ ] **Field Editing**\n  - Mock editing workflow\n  - Test edit mode activation\n  - Test save operation\n  - Test cancel operation\n  - Test validation\n\n- [ ] **Actions**\n  - Test update command integration\n  - Test close command\n  - Test refresh\n  - Test navigation commands\n\n- [ ] **Dependency Display**\n  - Mock dependency data\n  - Test dependency rendering\n  - Test dependency navigation\n\nTest coverage should be \u003e70% for show mode functionality.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:15.095576687+02:00","closed_at":"2025-10-16T22:22:48.764464196+02:00","dependencies":[{"issue_id":"beads.el-4","depends_on_id":"beads.el-1","type":"discovered-from","created_at":"2025-10-22T19:07:36.31422561+02:00","created_by":"import"},{"issue_id":"beads.el-4","depends_on_id":"beads.el-2","type":"blocks","created_at":"2025-10-22T19:07:36.323394289+02:00","created_by":"import"}]}
{"id":"beads.el-40","title":"beads.el: Implement bd restore command","description":"Implement Emacs interface for the bd restore command.\n\nThe restore command restores the full history of a compacted issue from\ngit. This reverses the compact operation for a specific issue.\n\nFeatures:\n- Transient menu or direct command for restore\n- Input: issue ID (with completion)\n- Context-aware: use current issue from list/show buffer\n- Show confirmation with:\n  - Issue ID\n  - Current (compacted) state\n  - What will be restored\n- Display results\n- Refresh show buffer if open for that issue\n- Invalidate completion cache\n\nThis operation is useful when you need to recover the full history of a\ncompacted issue.","acceptance_criteria":"## Acceptance Criteria\n\n### Command Implementation\n- [ ] beads-restore command/transient defined\n- [ ] Issue ID input with completion\n- [ ] Context-aware: uses current issue from list/show buffer\n- [ ] Show confirmation displaying:\n  - [ ] Issue ID\n  - [ ] Current (compacted) state\n  - [ ] What will be restored\n- [ ] Execute bd restore command with --json flag\n- [ ] Display results\n\n### Cache and Buffer Management\n- [ ] Refresh show buffer if open for restored issue\n- [ ] Invalidate completion cache\n\n### User Experience\n- [ ] Clear explanation of what restore does\n- [ ] Show before/after state\n- [ ] Integration with main beads transient menu\n\n### Testing\n- [ ] ERT tests for restore command\n- [ ] Test context detection\n- [ ] Test confirmation flow\n- [ ] Test buffer refresh\n- [ ] Test error handling (issue not compacted, etc.)\n- [ ] All tests passing\n- [ ] Integration tests added following pattern in lisp/test/beads-delete-test.el:260-270 (marked with :tags '(integration))","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:15.103750511+02:00","dependencies":[{"issue_id":"beads.el-40","depends_on_id":"beads.el-1","type":"parent-child","created_at":"2025-10-22T19:07:36.331677322+02:00","created_by":"import"}]}
{"id":"beads.el-41","title":"beads.el: Implement bd sync command","description":"Implement Emacs interface for the bd sync command.\n\nThe sync command synchronizes issues with git remote in a single\noperation (combines pull, auto-commit local changes, and push).\n\nFeatures:\n- Transient menu or direct command for sync\n- Show status before sync:\n  - Local changes to commit\n  - Remote changes to pull\n- Optional message for local changes\n- Progress indicator during sync (async operation)\n- Display results:\n  - Changes committed\n  - Changes pulled\n  - Changes pushed\n  - Any conflicts\n- Error handling for:\n  - Merge conflicts\n  - Network issues\n  - No remote configured\n- Refresh all buffers after successful sync\n\nThis should be easily accessible (similar to Magit's push/pull), as\nsyncing is a frequent operation in collaborative workflows.","acceptance_criteria":"## Acceptance Criteria\n\n### Command Implementation\n- [ ] beads-sync command/transient defined\n- [ ] Show status before sync:\n  - [ ] Local changes to commit\n  - [ ] Remote changes to pull\n- [ ] Optional message field for local changes\n- [ ] Execute bd sync command asynchronously with --json flag\n- [ ] Progress indicator during sync operation\n- [ ] Display results:\n  - [ ] Changes committed\n  - [ ] Changes pulled\n  - [ ] Changes pushed\n  - [ ] Any conflicts\n\n### Error Handling\n- [ ] Handle merge conflicts gracefully\n- [ ] Handle network issues\n- [ ] Handle no remote configured\n- [ ] Clear error messages for all failure cases\n\n### Cache and Buffer Management\n- [ ] Refresh all buffers after successful sync\n- [ ] Invalidate caches as needed\n\n### User Experience\n- [ ] Easily accessible (similar to Magit push/pull)\n- [ ] Clear progress indication\n- [ ] Integration with main beads transient menu\n- [ ] Quick access keybinding\n\n### Testing\n- [ ] ERT tests for sync command execution\n- [ ] Test async operation handling\n- [ ] Test progress display\n- [ ] Test error handling (conflicts, network, no remote)\n- [ ] Test buffer refresh after sync\n- [ ] All tests passing\n- [ ] Integration tests added following pattern in lisp/test/beads-delete-test.el:260-270 (marked with :tags '(integration))","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:15.112078575+02:00","dependencies":[{"issue_id":"beads.el-41","depends_on_id":"beads.el-1","type":"parent-child","created_at":"2025-10-22T19:07:36.339898242+02:00","created_by":"import"}]}
{"id":"beads.el-42","title":"Update documentation for source installation with use-package","description":"Update the beads.el installation documentation to show how to install\nfrom source using use-package, since the package is not yet on MELPA.\n\nThe current documentation (likely in README.md) needs to be updated to\nprovide clear installation instructions for users who want to install\nbeads.el directly from the git repository.\n\n**Required changes:**\n- Update README.md installation section\n- Remove or clarify any references to MELPA installation\n- Add use-package configuration example with :load-path or :vc\n- Include any required dependencies (transient, etc.)\n- Show how to set up autoloads properly\n- Add quickstart section for first-time setup\n\n**Example use-package configuration to include:**\n```elisp\n;; Option 1: Using :load-path (after git clone)\n(use-package beads\n  :load-path \"~/path/to/beads.el/lisp\"\n  :commands (beads beads-list beads-show beads-create)\n  :bind ((\"C-c b\" . beads)))\n\n;; Option 2: Using :vc (Emacs 29+)\n(use-package beads\n  :vc (:fetcher github :repo \"user/beads.el\")\n  :commands (beads beads-list beads-show beads-create))\n```\n\n**Also document:**\n- Manual installation steps (git clone, add to load-path)\n- Required Emacs version (27.1+)\n- Required dependencies\n- How to byte-compile for better performance","acceptance_criteria":"## Acceptance Criteria\n\n### Documentation Updates\n- [ ] README.md installation section updated\n- [ ] MELPA references removed or marked as \"coming soon\"\n- [ ] use-package examples added (both :load-path and :vc methods)\n- [ ] Manual installation steps documented\n- [ ] Required dependencies clearly listed\n- [ ] Minimum Emacs version specified (27.1+)\n\n### Installation Examples\n- [ ] use-package with :load-path example provided\n- [ ] use-package with :vc example provided (Emacs 29+)\n- [ ] Manual installation example (git clone + load-path)\n- [ ] Byte-compilation instructions included\n- [ ] Autoload setup documented\n\n### Quickstart Section\n- [ ] First-time setup instructions added\n- [ ] bd CLI installation mentioned\n- [ ] Basic usage example provided\n- [ ] Link to bd quickstart command\n\n### Testing\n- [ ] Installation instructions tested on clean Emacs install\n- [ ] Both use-package methods verified to work\n- [ ] Manual installation verified to work\n- [ ] All code examples are accurate and working","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:15.121091967+02:00","closed_at":"2025-10-19T16:18:39.547157798Z","dependencies":[{"issue_id":"beads.el-42","depends_on_id":"beads.el-1","type":"parent-child","created_at":"2025-10-22T19:07:36.347769896+02:00","created_by":"import"}]}
{"id":"beads.el-43","title":"Set up Eldev for development, testing, and linting","description":"Integrate Eldev (Emacs Lisp Development) tool into the beads.el\nproject to streamline development, testing, and linting workflows.\n\nEldev provides:\n- Dependency management (install transient, etc.)\n- Test running with multiple Emacs versions\n- Linting (checkdoc, package-lint, elisp-lint)\n- Byte compilation with warnings\n- CI/CD integration\n- Consistent development environment\n\n**Current state:**\n- Tests run via Makefile (make test, make test-*)\n- No automated linting\n- No multi-version Emacs testing\n- Manual dependency management\n\n**Proposed changes:**\n- Add Eldev configuration file\n- Configure test runner to use existing ERT tests\n- Add linting targets (checkdoc, package-lint, elisp-lint)\n- Set up CI workflow using Eldev (GitHub Actions)\n- Document Eldev usage in README.md\n- Keep Makefile for compatibility (can call Eldev commands)\n\n**Eldev configuration should include:**\n- Minimum Emacs version (27.1)\n- Dependencies (transient)\n- Test files location (lisp/test/)\n- Linting rules and exclusions\n- Build targets\n\n**Benefits:**\n- Consistent dev environment across machines\n- Automated code quality checks\n- Multi-version testing (Emacs 27.1, 28.x, 29.x)\n- Better CI/CD integration\n- Catches issues before commit","design":"## Eldev Configuration\n\nCreate `Eldev` file at project root:\n\n```elisp\n; -*- mode: emacs-lisp; lexical-binding: t -*-\n\n(eldev-use-package-archive 'gnu)\n(eldev-use-package-archive 'melpa)\n\n(setq eldev-project-main-file \"beads.el\")\n\n;; Minimum Emacs version\n(eldev-add-extra-dependencies 'emacs \"27.1\")\n\n;; Runtime dependencies\n(eldev-add-extra-dependencies 'runtime '(transient))\n\n;; Development dependencies\n(eldev-add-extra-dependencies 'test '(ert))\n(eldev-add-extra-dependencies 'lint '(package-lint))\n\n;; Test files location\n(setf eldev-test-fileset '(\"./lisp/test/*.el\"))\n\n;; Load path includes lisp directory\n(eldev-add-loading-roots 'build \"lisp\")\n```\n\n## GitHub Actions Workflow\n\nCreate `.github/workflows/test.yml`:\n\n```yaml\nname: CI\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        emacs_version:\n          - '27.1'\n          - '28.2'\n          - '29.1'\n          - 'snapshot'\n    steps:\n      - uses: actions/checkout@v4\n      \n      - uses: purcell/setup-emacs@master\n        with:\n          version: ${{ matrix.emacs_version }}\n      \n      - uses: actions/cache@v3\n        with:\n          path: ~/.emacs.d/eldev\n          key: ${{ runner.os }}-eldev-${{ hashFiles('Eldev') }}\n      \n      - name: Install Eldev\n        run: curl -fsSL https://raw.github.com/doublep/eldev/master/webinstall/github-eldev | sh\n      \n      - name: Test\n        run: |\n          cd lisp\n          eldev -p -dtT test\n      \n      - name: Lint\n        run: |\n          cd lisp\n          eldev -p -dtT lint\n```\n\n## Makefile Integration\n\nUpdate existing Makefile to optionally use Eldev:\n\n```makefile\n# Use Eldev if available, otherwise fall back to direct emacs calls\nHAS_ELDEV := $(shell command -v eldev 2\u003e /dev/null)\n\nifdef HAS_ELDEV\ntest:\n\teldev test\n\nlint:\n\teldev lint\n\ncompile:\n\teldev compile\nelse\n# Keep existing implementation\ntest:\n\temacs -batch -L . -l ert ...\nendif\n```","acceptance_criteria":"## Acceptance Criteria\n\n### Eldev Setup\n- [ ] Eldev file created at project root\n- [ ] Minimum Emacs version specified (27.1)\n- [ ] Dependencies declared (transient)\n- [ ] Test files location configured\n- [ ] Project structure recognized by Eldev\n\n### Testing Integration\n- [ ] All ERT tests run via eldev test\n- [ ] Test output is clear and formatted\n- [ ] Can run individual test files\n- [ ] Test statistics displayed\n- [ ] All existing tests pass\n\n### Linting\n- [ ] checkdoc linting configured and working\n- [ ] package-lint configured and working\n- [ ] elisp-lint configured (optional, more strict)\n- [ ] Linting exclusions for test files\n- [ ] eldev lint command runs without errors on core files\n\n### Build and Compile\n- [ ] eldev compile works for all .el files\n- [ ] Byte compilation warnings addressed or documented\n- [ ] eldev package creates distributable package\n\n### CI/CD Integration\n- [ ] GitHub Actions workflow added\n- [ ] Tests run on push/PR\n- [ ] Multiple Emacs versions tested (27.1, 28.x, 29.x)\n- [ ] Linting runs in CI\n- [ ] CI badge added to README\n\n### Documentation\n- [ ] Eldev installation instructions in README.md\n- [ ] Development workflow documented (test, lint, build)\n- [ ] Makefile updated to use Eldev (or kept as alias)\n- [ ] Contributing guide mentions Eldev\n\n### Compatibility\n- [ ] Existing Makefile still works (can wrap Eldev)\n- [ ] Developers can choose Makefile or Eldev\n- [ ] No breaking changes to existing workflows","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:15.129491528+02:00","closed_at":"2025-10-19T12:31:06.654977454Z","dependencies":[{"issue_id":"beads.el-43","depends_on_id":"beads.el-1","type":"parent-child","created_at":"2025-10-22T19:07:36.355941646+02:00","created_by":"import"}]}
{"id":"beads.el-45","title":"Restructure file organization: remove beads-pkg.el and align test files with implementation files","description":"Reorganize the project file structure for better maintainability:\n\n## lisp/ directory changes\n- Remove beads-pkg.el (no longer needed)\n- Keep all other implementation files as-is\n\n## lisp/test/ directory changes\nRestructure test files so each implementation file has a corresponding test \nfile following the pattern: implementation-file.el → implementation-file-test.el\n\nCurrent test files that need renaming/merging:\n- beads-transient-create-test.el → merge into beads-create-test.el\n- beads-transient-close-test.el → merge into beads-close-test.el  \n- beads-transient-update-test.el → merge into beads-update-test.el\n\nExpected final test structure (one test file per implementation file):\n- beads-test.el\n- beads-close-test.el\n- beads-create-test.el\n- beads-delete-test.el\n- beads-dep-test.el\n- beads-graph-test.el (may need to be created if missing)\n- beads-list-test.el\n- beads-main-test.el\n- beads-misc-test.el\n- beads-show-test.el\n- beads-stats-test.el\n- beads-update-test.el\n\nKeep existing test files that match this pattern. Preserve all test code during \nrestructuring - no tests should be lost.\n\nFiles like beads-utils-test.el, beads-process-test.el, beads-project-test.el, \nbeads-tramp-test.el, and beads-testing.el should be evaluated - if they test \nfunctionality from beads.el core, merge them appropriately.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:15.137910015+02:00","closed_at":"2025-10-19T14:49:22.104349456Z"}
{"id":"beads.el-46","title":"Consolidate core beads.el tests and rename test helper file","description":"Complete the file structure reorganization by consolidating core beads.el test \nfiles and renaming the test helper file.\n\n## Changes needed\n\n### Merge core test files into beads-test.el\nCurrently we have test files without corresponding implementation files:\n- beads-utils-test.el (tests logging, error handling, customization)\n- beads-process-test.el (tests process execution, JSON parsing)\n- beads-project-test.el (tests project.el integration, .beads discovery)\n- beads-tramp-test.el (tests Tramp remote support)\n\nAll of these test functionality from the core beads.el module. Merge them into\na single beads-test.el file to achieve 1-to-1 correspondence between \nimplementation and test files.\n\n### Rename test helper file\n- beads-testing.el → beads-test-helper.el\n\nThis makes it clear it's not a test file itself, but provides shared utilities\nfor the test suite.\n\n## Expected outcome\n\nAfter this change, every *-test.el file will have exactly one corresponding\nimplementation file:\n- beads-test.el → beads.el\n- beads-close-test.el → beads-close.el\n- beads-create-test.el → beads-create.el\n- etc.\n\nAnd beads-test-helper.el will clearly indicate it's a helper/utility file.\n\nAll tests must still pass after the merge.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:15.146156424+02:00","closed_at":"2025-10-19T15:07:25.748105247Z"}
{"id":"beads.el-47","title":"Add integration tests for all commands","description":"## Overview\n\nCurrently only beads-delete has integration tests (marked with :tags \n'(integration)). We need comprehensive integration tests for all \ncommands that test functionality at the user interaction level.\n\n## Reference Implementation\n\nSee lisp/test/beads-delete-test.el lines 260-270 for the integration \ntest pattern. Integration tests should:\n\n1. Be marked with :tags '(integration)\n2. Test real user workflows (keybindings, buffer modes, context \n   detection)\n3. Test end-to-end command execution from UI entry points\n4. Avoid excessive mocking - test actual integration between modules\n\n## Commands Needing Integration Tests\n\n### High Priority\n- beads-create: Test transient menu workflow, field validation, \n  issue creation from different contexts\n- beads-update: Test context-aware updates from list/show modes, \n  transient menu\n- beads-close: Test closing from different contexts, reason \n  requirement\n- beads-list: Test keybindings (RET, TAB, g, D, etc.), navigation, \n  filtering\n- beads-show: Test rendering, navigation (C-c C-n/p/f/b/u), \n  clickable references\n  \n### Medium Priority  \n- beads-dep: Test dependency management commands, graph navigation\n- beads-graph: Test graph generation and visualization\n- beads-stats: Test statistics display and formatting\n- beads-misc: Test import/export, archive commands\n\n### Cross-Module Integration\n- beads-main: Test root transient menu navigation to subcommands\n- Context switching: Test moving between list → show → edit workflows\n- Cache invalidation: Test that mutations properly refresh UI buffers\n\n## Success Criteria\n\n- Each command module has integration tests in its test file\n- Tests verify keybindings work in appropriate major modes\n- Tests verify commands work from different contexts (list mode, \n  show mode, no context)\n- Tests verify buffer creation, navigation, and cleanup\n- All integration tests pass with: eldev test -t integration\n- Remove unit tests that duplicate integration test coverage\n\n## Implementation Notes\n\n- Use beads-test-helper for common mocking patterns\n- Keep process-file mocking but test actual function integration\n- Test actual buffer creation, keybindings, and mode behavior\n- Focus on \"does this work like a user would expect?\"","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:15.154544942+02:00","closed_at":"2025-10-19T15:55:58.587437208Z"}
{"id":"beads.el-48","title":"Revisit and standardize key bindings across beads.el","description":"Review and standardize key bindings throughout beads.el for consistency\nand alignment with popular Emacs modes (Magit, dired, ibuffer, etc.).\n\n## Current Issues\n\n### Inconsistent Buffer-Level Keys\n- Close: `d` or `k` in list mode\n- Reopen: `o` in list mode\n- Create: `c` or `+` in list mode\n- Update: `e` in list mode\n- Delete: `D` in list mode\n\nSome of these conflict with common Emacs conventions or are inconsistent\nwith each other.\n\n### Inconsistent Transient Menu Execute Keys\nDifferent transient menus use different keys for the main action:\n- beads-create: `x` to execute\n- beads-update: `x` to execute\n- beads-close: `x` to execute\n- beads-reopen: `x` to execute\n- Other menus may vary\n\nWe should standardize on one key (probably `x` or `RET`) across all\ntransient menus.\n\n## Research Conventions\n\nStudy key bindings from popular modes:\n- **Magit**: How does it handle similar operations?\n- **dired**: File operations (delete, rename, etc.)\n- **ibuffer**: Buffer operations (mark, delete, etc.)\n- **org-mode**: Task state changes\n- **package-menu-mode**: Install/delete operations\n\n## Proposed Changes\n\n### Buffer-Level Keys\nConsider these conventions:\n- `RET` - Show/view issue details (current)\n- `c` - Create new issue (current, matches dired `C` for copy/create)\n- `e` - Edit/update issue (current, matches dired edit)\n- `d` - Mark for deletion/closing (like dired `d` for delete)\n- `x` - Execute marked operations (like dired `x`)\n- `k` - Kill/close immediately (like `k` in many modes)\n- `o` - Reopen (current)\n- `D` - Delete permanently (current, matches dired `D`)\n\nOr alternative:\n- `c` - Close issue (more intuitive than `d`?)\n- `r` - Reopen issue (instead of `o`?)\n\n### Transient Menu Keys\nStandardize execute key across all transient menus:\n- Primary action: `x` (execute) or `RET` or `C-c C-c`\n- Preview: `P` or `C-c C-p`\n- Reset: `R` or `C-c C-k`\n- Quit: `q` or `C-c C-q`\n\n### Bulk Operations\n- `B` prefix for bulk operations (current)\n- Consistent with buffer-level operations where possible\n\n## Acceptance Criteria\n\n- [ ] Document current key bindings across all modes\n- [ ] Research conventions from popular Emacs modes\n- [ ] Propose consistent key binding scheme\n- [ ] Get user feedback on proposal\n- [ ] Update all key bindings consistently\n- [ ] Update documentation (README, docstrings)\n- [ ] Update tests for new key bindings\n- [ ] Verify no conflicts with standard Emacs keys\n- [ ] All existing functionality still accessible\n\n## Notes\n\nThis is a breaking change for existing users, so:\n- Consider adding a compatibility layer or migration guide\n- Document changes clearly in CHANGELOG\n- Consider making key bindings customizable\n- Test thoroughly to ensure no regressions","acceptance_criteria":"## Documentation Phase\n- [ ] Document current key bindings across all modes and buffers\n- [ ] Document current transient menu execute keys\n- [ ] Document current bulk operation keys\n- [ ] Research conventions from Magit, dired, ibuffer, org-mode, package-menu-mode\n\n## Design Phase\n- [ ] Propose consistent key binding scheme\n- [ ] Decide: RET vs x for transient menu execute (proposal: RET primary, x alternative)\n- [ ] Design bulk operations to mirror single operations (B + same key)\n- [ ] Ensure main menu keys match buffer-level keys\n- [ ] Get user feedback on proposal\n- [ ] Consider customization options\n\n## Implementation Phase\n- [ ] Update all transient menus to use RET as primary execute (+ x alternative)\n- [ ] Update bulk operations to mirror single operation keys (B c, B e, B o, etc.)\n- [ ] Ensure main menu bindings match buffer-level bindings\n- [ ] Update all key bindings consistently across all modes\n- [ ] Verify no conflicts with standard Emacs keys\n\n## Documentation Phase\n- [ ] Update README.md with new key bindings\n- [ ] Update docstrings for all commands\n- [ ] Create CHANGELOG entry documenting breaking changes\n- [ ] Create migration guide for existing users\n- [ ] Consider adding compatibility layer or deprecation warnings\n\n## Testing Phase\n- [ ] Update all tests for new key bindings\n- [ ] Add tests verifying consistency (bulk mirrors single, menu matches buffer)\n- [ ] Test in clean Emacs session\n- [ ] Test all existing functionality still accessible\n- [ ] Verify no regressions\n\n## Release Phase\n- [ ] Document in release notes prominently\n- [ ] Consider making key bindings customizable via defcustom\n- [ ] Test migration path for existing users","notes":"Additional insights from discussion:\n\n## RET vs x for Execute\n\nRET (Return/Enter) might be better than `x` for executing commands because:\n- More intuitive - \"press Enter to do it\"\n- Standard in many Emacs interfaces (completing-read, etc.)\n- One less keystroke (no Shift needed)\n- Muscle memory from other applications\n\nIf RET works, consider using it as primary execute key with `x` as alternative.\n\n## Main Menu vs Bulk Operations Consistency\n\nKEY INSIGHT: Bindings should be consistent between:\n1. Main transient menu (M-x beads)\n2. Buffer-level single operations (e.g., `c` in list mode)\n3. Bulk operations (e.g., `B c` in list mode)\n\nExample inconsistency to fix:\n- If main menu uses `c` for create\n- And list mode uses `c` for create\n- And bulk prefix is `B`\n- Then bulk operations should mirror: `B c`, `B e`, `B d`, etc.\n\nCurrent state to check:\n- Main menu: What keys are used?\n- List mode single: `c` create, `e` update, `d`/`k` close, `o` reopen, `D` delete\n- List mode bulk: `B s` (status), `B p` (priority), `B c` (close), `B o` (reopen)\n\nNotice: Bulk uses different keys than single operations!\n- Single: `e` for update\n- Bulk: `B s` for status, `B p` for priority (no `B e` for update?)\n\nProposal: Make bulk operations use same keys as single operations\n- `B c` - bulk close (matches `d`/`k` single close)\n- `B o` - bulk reopen (matches `o` single reopen)  \n- `B e` - bulk update (matches `e` single update)\n- `B d` - bulk delete? (matches `D` single delete)\n\nThis makes it easier to remember: \"press B before the normal key to do bulk operation\"","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:15.162825919+02:00"}
{"id":"beads.el-49","title":"Add filtering to list view by type and status","description":"The beads-list view should support filtering issues by type and status. This would allow users to quickly narrow down the displayed issues without leaving the list buffer.\n\nProposed features:\n- Filter by issue type (feature, bug, task, etc.)\n- Filter by status (open, in_progress, blocked, closed, etc.)\n- Interactive transient menu for setting filters\n- Visual indication of active filters in list header\n- Key binding to toggle filters (e.g., 'f' for filter)\n- Clear/reset filters option\n\nImplementation considerations:\n- Should preserve current filters when refreshing (g key)\n- Filters should be buffer-local to each list view\n- Could use transient toggles for multiple filter criteria\n- May need to modify beads--list-issues to accept filter parameters","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:15.171380954+02:00"}
{"id":"beads.el-5","title":"beads.el: Transient menu for bd create command","description":"Implement transient menu for creating new issues.\n\nTransient definition:\n- Prefix: beads.el-create (bound in main menu)\n- Infixes for all flags:\n  - Type (-t): bug, feature, task, epic, chore\n  - Priority (-p): 0-4 with descriptions\n  - Description (-d): multiline input\n  - Custom ID (--id): for parallel workers\n  - Dependencies (--deps): discovered-from, blocks, etc.\n- Suffix: Execute create command\n\nFeatures:\n- Interactive prompts with completion\n- Validation of required fields (title)\n- Show current values in transient display\n- Preview command before execution\n- Auto-refresh list buffers after creation\n- Support for templates (optional)\n\nIntegration:\n- Call bd create with --json flag\n- Parse response and show created issue\n- Handle errors gracefully","acceptance_criteria":"## Acceptance Criteria\n\n### Transient Menu Definition\n- [ ] beads.el-create-transient defined using transient-define-prefix\n- [ ] Menu accessible from root transient menu\n- [ ] Menu can also be invoked directly via M-x beads.el-create\n\n### Infix Arguments\n- [ ] Type selection (-t): bug, feature, task, epic, chore with completion\n- [ ] Priority selection (-p): 0-4 with descriptions (0=Critical, 1=High, etc.)\n- [ ] Description input (-d): multiline text input\n- [ ] Custom ID (--id): optional string input for parallel workers\n- [ ] Dependencies (--deps): format \"type:issue-id\" with completion\n\n### Suffix Actions\n- [ ] Create action constructs correct bd create command\n- [ ] All infix values properly passed to bd CLI\n- [ ] --json flag automatically added\n- [ ] Command executed and JSON response parsed\n\n### User Experience\n- [ ] Current infix values displayed in transient menu\n- [ ] Required fields (title) validated before execution\n- [ ] Help text shown for each option\n- [ ] Preview full command before execution (optional)\n- [ ] Error messages displayed clearly\n- [ ] Success message with created issue ID\n\n### Integration\n- [ ] After successful creation, show created issue\n- [ ] Refresh any open list buffers\n- [ ] Return to appropriate buffer (list or show)\n\n### Optional Features\n- [ ] Template support for common issue types\n- [ ] Recently used values suggested\n- [ ] Duplicate issue detection warning\n\n## Test Coverage (ERT)\nTests in lisp/test/beads-transient-create-test.el:\n\n- [ ] **Transient Definition**\n  - Test prefix command exists\n  - Test infix commands registered\n  - Test suffix commands work\n\n- [ ] **Command Construction**\n  - Test bd create command building with all flags\n  - Test title handling (with spaces, special chars)\n  - Test description multiline handling\n  - Test dependency format parsing\n  - Test global flags inclusion\n\n- [ ] **Validation**\n  - Test missing title error\n  - Test invalid priority error\n  - Test invalid type error\n  - Test invalid dependency format\n\n- [ ] **Execution**\n  - Mock bd create --json response\n  - Test successful creation flow\n  - Test error handling\n  - Test buffer refresh after creation\n\n- [ ] **Integration**\n  - Test show buffer opens after creation\n  - Test list buffer refresh\n  - Test multiple creates in sequence\n\nTest coverage should be \u003e70% for create transient functionality.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:15.179297781+02:00","closed_at":"2025-10-16T22:22:48.791056489+02:00","dependencies":[{"issue_id":"beads.el-5","depends_on_id":"beads.el-1","type":"discovered-from","created_at":"2025-10-22T19:07:36.364472312+02:00","created_by":"import"},{"issue_id":"beads.el-5","depends_on_id":"beads.el-2","type":"blocks","created_at":"2025-10-22T19:07:36.372259822+02:00","created_by":"import"}]}
{"id":"beads.el-50","title":"Adjust column widths in list view","description":"The list view column widths need adjustment:\n\nProblems:\n- ID column is too narrow for some longer issue prefixes\n- Status column is wider than necessary\n\nProposed changes:\n- Widen ID column to accommodate longer prefixes\n- Narrow status column to match the width of the longest status value (e.g., 'in_progress' is 11 characters)\n- Priority column is fine as-is\n- Other columns (title, type, etc.) are fine as-is\n\nImplementation:\n- Update column width specifications in beads-list.el\n- The tabulated-list-format vector defines column widths\n- Status column should be sized to fit the longest possible status string","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:15.188283116+02:00","closed_at":"2025-10-20T18:51:59.550994933+02:00"}
{"id":"beads.el-51","title":"Add creation date column and sort by newest first","description":"The list view should display when issues were created and sort by creation date by default.\n\nRequirements:\n- Add a 'Created' column to the list view showing creation date/time\n- Sort issues by creation date in descending order (newest first)\n- Most recently created issues should appear at the top of the list\n- Format the date appropriately (e.g., relative time like '2 hours ago' or ISO date)\n\nImplementation:\n- Add 'created_at' field to tabulated-list-format in beads-list.el\n- Parse created_at from JSON response (already available in bd output)\n- Set tabulated-list-sort-key to sort by Created column descending\n- Consider formatting options: relative time vs absolute date\n- May need helper function for date formatting (beads--format-date)","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:15.19700654+02:00","closed_at":"2025-10-20T17:06:21.358143643Z"}
{"id":"beads.el-52","title":"Refactor beads-create to use transient-args pattern","description":"Refactor beads-create.el to use the modern transient-args pattern instead of maintaining duplicate state variables.\n\n**Current Pattern (Duplicate State):**\n- Maintains state variables: beads-create--title, beads-create--type, etc.\n- Custom :reader functions manually sync to state variables\n- Execute function reads from state variables\n- Requires manual state management and reset logic\n\n**New Pattern (Single Source of Truth):**\n- Remove state variables\n- Use standard transient infixes without custom readers\n- Execute function calls (transient-args 'beads-create)\n- Parse arguments into values\n- Reset calls (transient-set) to clear transient's state\n\n**Benefits:**\n- Single source of truth (transient manages state)\n- ~50-100 lines less code\n- More maintainable\n- Consistent with beads-sync.el\n- Follows standard transient usage patterns\n\n**Reference:**\nSee beads-sync.el for the new pattern implementation.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:15.205358108+02:00","dependencies":[{"issue_id":"beads.el-52","depends_on_id":"beads.el-1","type":"discovered-from","created_at":"2025-10-22T19:07:36.380115339+02:00","created_by":"import"},{"issue_id":"beads.el-52","depends_on_id":"beads.el-56","type":"parent-child","created_at":"2025-10-22T19:07:36.388430234+02:00","created_by":"import"}]}
{"id":"beads.el-53","title":"Refactor beads-update to use transient-args pattern","description":"Refactor beads-update.el to use the modern transient-args pattern instead of maintaining duplicate state variables.\n\n**Current Pattern:**\n- State variables: beads-update--status, beads-update--priority, beads-update--type, etc.\n- Custom :reader functions manually sync state\n- Complex change tracking logic\n- Manual state reset\n\n**New Pattern:**\n- Remove state variables\n- Use (transient-args 'beads-update)\n- Parse arguments to extract values\n- Simpler change detection\n- (transient-set) for reset\n\n**Benefits:**\n- Consistent with beads-sync.el\n- Simpler codebase (~100+ lines less)\n- Standard transient patterns\n- Easier to maintain\n\n**Reference:**\nSee beads-sync.el and beads.el-52 for pattern.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:15.213673818+02:00","dependencies":[{"issue_id":"beads.el-53","depends_on_id":"beads.el-1","type":"discovered-from","created_at":"2025-10-22T19:07:36.396898217+02:00","created_by":"import"},{"issue_id":"beads.el-53","depends_on_id":"beads.el-52","type":"blocks","created_at":"2025-10-22T19:07:36.405267568+02:00","created_by":"import"},{"issue_id":"beads.el-53","depends_on_id":"beads.el-56","type":"parent-child","created_at":"2025-10-22T19:07:36.413947007+02:00","created_by":"import"}]}
{"id":"beads.el-54","title":"Refactor beads-close and beads-reopen to use transient-args pattern","description":"Refactor beads-close.el and beads-reopen.el to use the modern transient-args pattern.\n\n**Modules to Update:**\n- beads-close.el (reason parameter)\n- beads-reopen.el (reason parameter)\n\n**Current Pattern:**\n- State variables: beads-close--reason, beads-reopen--reason\n- Custom :reader functions\n- Manual state management\n\n**New Pattern:**\n- Use (transient-args) in execute functions\n- Parse arguments to extract reason\n- Standard transient infixes\n- (transient-set) for reset\n\n**Benefits:**\n- Consistent with beads-sync.el\n- Less code\n- Standard patterns\n\n**Reference:**\nSee beads-sync.el and beads.el-52 for pattern.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:15.22280222+02:00","dependencies":[{"issue_id":"beads.el-54","depends_on_id":"beads.el-1","type":"discovered-from","created_at":"2025-10-22T19:07:36.422661868+02:00","created_by":"import"},{"issue_id":"beads.el-54","depends_on_id":"beads.el-52","type":"blocks","created_at":"2025-10-22T19:07:36.435282062+02:00","created_by":"import"},{"issue_id":"beads.el-54","depends_on_id":"beads.el-56","type":"parent-child","created_at":"2025-10-22T19:07:36.443217294+02:00","created_by":"import"}]}
{"id":"beads.el-55","title":"Refactor beads-misc transient menus to use transient-args pattern","description":"Refactor transient menus in beads-misc.el to use the modern transient-args pattern.\n\n**Menus to Update:**\n- beads-dep (add/remove dependency commands)\n- beads-export (output path)\n- beads-import (input path, flags)\n- beads-init (prefix, db path)\n\n**Current Pattern:**\n- Multiple state variables per menu\n- Custom :reader functions\n- Manual state management and reset\n\n**New Pattern:**\n- Use (transient-args) in execute functions\n- Parse arguments to extract values\n- Standard transient infixes\n- (transient-set) for reset\n\n**Benefits:**\n- Consistent with beads-sync.el\n- Significantly less code (~150+ lines reduction)\n- Standard patterns across all menus\n- Easier maintenance\n\n**Reference:**\nSee beads-sync.el and beads.el-52 for pattern.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:15.231078176+02:00","dependencies":[{"issue_id":"beads.el-55","depends_on_id":"beads.el-1","type":"discovered-from","created_at":"2025-10-22T19:07:36.45135687+02:00","created_by":"import"},{"issue_id":"beads.el-55","depends_on_id":"beads.el-52","type":"blocks","created_at":"2025-10-22T19:07:36.459423771+02:00","created_by":"import"},{"issue_id":"beads.el-55","depends_on_id":"beads.el-56","type":"parent-child","created_at":"2025-10-22T19:07:36.4673096+02:00","created_by":"import"}]}
{"id":"beads.el-56","title":"Standardize all transient menus to use transient-args pattern","description":"Standardize all transient menu implementations to use the modern transient-args pattern for consistency and maintainability.\n\n**Current State:**\n- beads-sync uses the new pattern (reading from transient-args)\n- All other modules use the old pattern (duplicate state variables)\n- Inconsistent codebase with two different approaches\n\n**Goal:**\nMigrate all transient menus to the beads-sync pattern:\n1. Remove duplicate state variables\n2. Use standard transient infixes\n3. Read from (transient-args) in execute functions\n4. Use (transient-set) for reset\n\n**Benefits:**\n- Single source of truth (transient manages state)\n- ~300-400 lines less code across the project\n- Consistent patterns across all modules\n- Easier to maintain and extend\n- Follows standard transient library usage\n- Fewer bugs from state synchronization issues\n\n**Modules to Migrate:**\n- beads-create.el\n- beads-update.el\n- beads-close.el\n- beads-reopen.el\n- beads-misc.el (dep, export, import, init)\n\n**Reference Implementation:**\nlisp/beads-sync.el demonstrates the new pattern.","status":"open","priority":2,"issue_type":"epic","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:15.239519329+02:00","dependencies":[{"issue_id":"beads.el-56","depends_on_id":"beads.el-1","type":"discovered-from","created_at":"2025-10-22T19:07:36.47493269+02:00","created_by":"import"}]}
{"id":"beads.el-57","title":"Epic: Integration tests for WORKFLOW.md scenarios","description":"Create comprehensive integration tests that replicate the workflows documented in beads-reference/WORKFLOW.md using beads.el transient commands. Each workflow should have a corresponding test suite that exercises the full sequence of transient commands as a user would perform them.","status":"open","priority":1,"issue_type":"epic","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:15.24780961+02:00"}
{"id":"beads.el-58","title":"Integration test: 'Let's Continue' protocol workflow","description":"Test the session startup workflow from WORKFLOW.md:\n- Check for abandoned work (beads list --status in_progress)\n- Get ready work (beads ready --limit 5)\n- Show top priority issue (beads show bd-X)\n\nThis should be implemented as an integration test using beads.el transient commands, simulating the exact sequence a user would perform.","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:15.255995822+02:00","dependencies":[{"issue_id":"beads.el-58","depends_on_id":"beads.el-57","type":"parent-child","created_at":"2025-10-22T19:07:36.482717398+02:00","created_by":"import"}]}
{"id":"beads.el-59","title":"Integration test: Project kickoff workflow","description":"Test the project kickoff workflow from WORKFLOW.md Session 1:\n- Create multiple issues with varying priorities\n- Map dependencies between issues (beads dep add)\n- Visualize dependency tree (beads dep tree)\n- Check ready work (beads ready)\n\nThis should verify that beads.el transient commands correctly handle:\n- Bulk issue creation\n- Dependency relationship creation\n- Tree visualization\n- Ready work filtering based on dependencies","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:15.264886334+02:00","dependencies":[{"issue_id":"beads.el-59","depends_on_id":"beads.el-57","type":"parent-child","created_at":"2025-10-22T19:07:36.490690852+02:00","created_by":"import"}]}
{"id":"beads.el-6","title":"beads.el: Transient menu for bd update command","description":"Implement transient menu for updating existing issues.\n\nTransient definition:\n- Prefix: beads.el-update (bound in main menu and show buffer)\n- Infixes for all flags:\n  - Status (-s): open, in_progress, blocked, closed\n  - Priority (-p): 0-4\n  - Type (--type): bug, feature, task, epic, chore\n  - Title (--title): change title\n  - Acceptance criteria (--acceptance-criteria): multiline\n  - Design (--design): multiline\n  - Notes (--notes): multiline\n  - Assignee (-a): set assignee\n  - External ref (--external-ref): gh-N, jira-X, etc.\n- Suffix: Execute update command\n\nFeatures:\n- Auto-populate current values from issue\n- Support updating from list buffer (use current item)\n- Support updating from show buffer (use current issue)\n- Show diff of changes before applying\n- Auto-refresh buffers after update\n\nContext-aware:\n- In list buffer: operate on current item or marked items\n- In show buffer: operate on displayed issue\n- Elsewhere: prompt for issue ID","acceptance_criteria":"## Acceptance Criteria\n\n### Transient Menu Definition\n- [ ] beads.el-update-transient defined using transient-define-prefix\n- [ ] Menu accessible from root transient, list buffer, and show buffer\n- [ ] Can be invoked directly via M-x beads.el-update\n\n### Context Awareness\n- [ ] In list buffer: operates on current item or marked items\n- [ ] In show buffer: operates on displayed issue\n- [ ] Elsewhere: prompts for issue ID with completion\n- [ ] Auto-populate current values when updating existing issue\n\n### Infix Arguments\n- [ ] Status (-s): open, in_progress, blocked, closed with completion\n- [ ] Priority (-p): 0-4 with descriptions\n- [ ] Type (--type): bug, feature, task, epic, chore\n- [ ] Title (--title): string input\n- [ ] Acceptance criteria (--acceptance-criteria): multiline input\n- [ ] Design (--design): multiline input\n- [ ] Notes (--notes): multiline input\n- [ ] Assignee (-a): string input\n- [ ] External ref (--external-ref): string input (e.g., gh-9, jira-ABC)\n\n### Suffix Actions\n- [ ] Update action constructs correct bd update command\n- [ ] Only changed fields included in command\n- [ ] --json flag automatically added\n- [ ] Command executed and JSON response parsed\n\n### User Experience\n- [ ] Current values pre-populated in transient menu\n- [ ] Show diff of changes before applying (optional)\n- [ ] Help text for each option\n- [ ] Error messages displayed clearly\n- [ ] Success message after update\n\n### Batch Operations\n- [ ] Support updating multiple marked issues in list buffer\n- [ ] Only applicable fields updated in batch (status, priority, type)\n- [ ] Confirmation before batch update\n\n### Integration\n- [ ] Refresh show buffer after update\n- [ ] Refresh list buffers after update\n- [ ] Stay in current buffer or return to appropriate buffer\n\n## Test Coverage (ERT)\nTests in lisp/test/beads-transient-update-test.el:\n\n- [ ] **Transient Definition**\n  - Test prefix command exists\n  - Test infix commands registered\n  - Test suffix commands work\n\n- [ ] **Context Detection**\n  - Test issue ID extraction from list buffer\n  - Test issue ID extraction from show buffer\n  - Test prompt when no context available\n  - Test marked items detection\n\n- [ ] **Current Value Population**\n  - Test fetching current issue values\n  - Test pre-populating transient with current values\n  - Test handling missing optional fields\n\n- [ ] **Command Construction**\n  - Test bd update command with single field\n  - Test bd update command with multiple fields\n  - Test only changed fields included\n  - Test global flags inclusion\n\n- [ ] **Validation**\n  - Test invalid issue ID error\n  - Test invalid status/priority/type values\n  - Test empty required fields\n\n- [ ] **Batch Operations**\n  - Test batch update command construction\n  - Test batch update execution\n  - Test confirmation prompt\n\n- [ ] **Integration**\n  - Mock bd update --json response\n  - Test buffer refresh after update\n  - Test error handling\n  - Test multiple sequential updates\n\nTest coverage should be \u003e70% for update transient functionality.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:15.273335241+02:00","closed_at":"2025-10-16T22:22:48.816398091+02:00","dependencies":[{"issue_id":"beads.el-6","depends_on_id":"beads.el-1","type":"discovered-from","created_at":"2025-10-22T19:07:36.498514431+02:00","created_by":"import"},{"issue_id":"beads.el-6","depends_on_id":"beads.el-2","type":"blocks","created_at":"2025-10-22T19:07:36.506705562+02:00","created_by":"import"}]}
{"id":"beads.el-60","title":"Integration test: Issue lifecycle workflow","description":"Test the complete issue lifecycle from WORKFLOW.md Sessions 2-3:\n- Get ready work (beads ready)\n- Update issue to in_progress (beads update --status in_progress)\n- Show issue details (beads show)\n- Close issue with reason (beads close --reason)\n- Verify ready work updates after closure\n\nThis should verify that beads.el transient commands correctly handle:\n- Status transitions (open -\u003e in_progress -\u003e closed)\n- Issue detail display\n- Closing with required reason field\n- Automatic ready work recalculation after closure","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:15.283571307+02:00","dependencies":[{"issue_id":"beads.el-60","depends_on_id":"beads.el-57","type":"parent-child","created_at":"2025-10-22T19:07:36.514779167+02:00","created_by":"import"}]}
{"id":"beads.el-61","title":"Integration test: Blocker management workflow","description":"Test the blocker discovery and resolution workflow from WORKFLOW.md Sessions 4-5:\n- Create new blocker issue during work\n- Add dependency to mark current issue as blocked\n- Update current issue to blocked status\n- Verify ready work excludes blocked issue\n- Close blocker issue\n- Update blocked issue back to open\n- Verify ready work includes unblocked issue\n\nThis should verify that beads.el transient commands correctly handle:\n- Dynamic blocker creation\n- Dependency addition for blocking relationships\n- Status changes to/from blocked\n- Ready work filtering based on blocker status","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:15.293740229+02:00","dependencies":[{"issue_id":"beads.el-61","depends_on_id":"beads.el-57","type":"parent-child","created_at":"2025-10-22T19:07:36.522750904+02:00","created_by":"import"}]}
{"id":"beads.el-62","title":"Integration test: Epic and parent-child workflow","description":"Test the epic breakdown workflow from WORKFLOW.md Pro Tips section:\n- Create an epic issue\n- Create multiple child task issues\n- Add parent-child dependencies (beads dep add --type parent-child)\n- Verify parent-child relationships in issue display\n- Test completing child issues\n- Test epic status tracking\n\nThis should verify that beads.el transient commands correctly handle:\n- Epic issue type creation\n- Parent-child relationship management\n- Hierarchical issue organization\n- Epic progress tracking based on children","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:15.302101048+02:00","dependencies":[{"issue_id":"beads.el-62","depends_on_id":"beads.el-57","type":"parent-child","created_at":"2025-10-22T19:07:36.530762551+02:00","created_by":"import"}]}
{"id":"beads.el-63","title":"Integration test: Labels and metadata workflow","description":"Test the labels and metadata workflow from WORKFLOW.md Pro Tips section:\n- Create issues with labels (beads create -l 'bug,urgent')\n- Add comments to issues (beads comment)\n- Set estimated minutes (beads create --estimated-minutes)\n- Filter/search by labels\n- View issue metadata in show view\n- Update labels on existing issues\n\nThis should verify that beads.el transient commands correctly handle:\n- Label creation and assignment\n- Comment adding and display\n- Time estimation fields\n- Label-based filtering\n- Metadata display in UI","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:15.310254237+02:00","dependencies":[{"issue_id":"beads.el-63","depends_on_id":"beads.el-57","type":"parent-child","created_at":"2025-10-22T19:07:36.538443769+02:00","created_by":"import"},{"issue_id":"beads.el-63","depends_on_id":"beads.el-27","type":"blocks","created_at":"2025-10-22T19:07:36.545931366+02:00","created_by":"import"},{"issue_id":"beads.el-63","depends_on_id":"beads.el-64","type":"blocks","created_at":"2025-10-22T19:07:36.554182352+02:00","created_by":"import"}]}
{"id":"beads.el-64","title":"Implement bd comments command and subcommands","description":"Implement transient menu interface for the bd comments command, supporting:\n- List comments on an issue (bd comments \u003cissue-id\u003e)\n- Add comment to an issue (bd comments add \u003cissue-id\u003e 'text')\n- Add comment from file (bd comments add \u003cissue-id\u003e -f file.txt)\n\nThis command is required for the integration test beads.el-63 (Labels and metadata workflow).\n\nImplementation should follow the pattern established in beads-create.el and beads-update.el, with:\n- Context-aware issue ID detection (from list/show buffers)\n- Transient menu with infixes for comment text and file\n- Validation before execution\n- Preview command\n- Proper error handling\n\nTesting requirements:\n- Add tests following pattern in beads-create-test.el\n- Mock bd command output\n- Test both success and error paths\n- Run all checks (test, lint, compile) - ALL MUST PASS","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:15.318303352+02:00","dependencies":[{"issue_id":"beads.el-64","depends_on_id":"beads.el-1","type":"parent-child","created_at":"2025-10-22T19:07:36.562290791+02:00","created_by":"import"}],"comments":[{"id":4,"issue_id":"beads.el-64","author":"roman","text":"**Context-Aware Invocation Requirements:**\n\nThe beads-comments command should support two invocation patterns:\n\n1. **Direct invocation with M-x beads-comments**: \n   - Opens transient menu with subcommands\n   - Prompts for issue ID when needed\n   - Shows list/add options\n\n2. **Context-aware invocation from buffers**:\n   - In beads-list-mode: detect issue ID from current line\n   - In beads-show-mode: detect issue ID from buffer name\n   - Pre-populate issue ID for list/add operations\n   - Allow keyboard shortcuts in show view (e.g., 'c' for add comment)\n\nThis follows the pattern established in beads-update.el and beads-close.el. See beads--detect-context-issue-id and beads-list--get-issue-id-at-point for reference implementations.\n\n**Integration with show buffers:**\n- Display comments section in beads-show-mode\n- Refresh show buffer after adding comment\n- Support adding comment with text or from file","created_at":"2025-10-22T17:07:36Z"}]}
{"id":"beads.el-65","title":"Epic: Analyze and adopt Magit design patterns","description":"Check out the Magit (https://github.com/magit/magit) and Transient (https://github.com/magit/transient) repositories to understand the gold standard for transient-based Emacs user interfaces.\n\n## Goals\n\n1. **Study Magit's Architecture**\n   - Analyze how Magit organizes its transient menus\n   - Understand the command structure and naming conventions\n   - Study how they handle global flags vs command-specific options\n   - Learn their buffer management and navigation patterns\n   - Examine their key binding conventions\n\n2. **Study Transient Framework Design**\n   - Understand transient menu best practices from the upstream library\n   - Learn proper use of infixes, suffixes, and group layouts\n   - Study transient state management patterns\n   - Examine how Magit uses transient features\n\n3. **Analyze Global Flags Handling**\n   - How does Magit handle Git's global flags (--git-dir, --work-tree, etc.)?\n   - How are they exposed in transient menus?\n   - How are they passed to commands?\n   - Should beads use a similar pattern for --actor, --db, --no-daemon, etc.?\n\n4. **Analyze Command Flags Presentation**\n   - Does Magit use prefixes like \"-d\" for its options in transient menus?\n   - How are boolean flags vs value flags differentiated?\n   - How are required vs optional arguments presented?\n   - What visual conventions are used for different flag types?\n\n5. **Update All Transient Issues**\n   - Review every beads.el issue that implements a transient menu\n   - Add text-based preview showing how the menu will look\n   - Update designs to follow Magit conventions\n   - Ensure consistency across all command implementations\n\n## Deliverables\n\n- Document Magit design patterns in CLAUDE.md or a new MAGIT_PATTERNS.md\n- Create text-based previews for all transient menus\n- Update existing issues with improved designs\n- Create guidelines for future transient menu implementations","design":"Check out the Magit (https://github.com/magit/magit) and Forge (https://github.com/magit/forge) repositories to understand the gold standard for transient-based Emacs user interfaces.\n\n## Goals\n\n1. **Study Magit's Architecture**\n   - Analyze how Magit organizes its transient menus\n   - Understand the command structure and naming conventions\n   - Study how they handle global flags vs command-specific options\n   - Learn their buffer management and navigation patterns\n   - Examine their key binding conventions\n\n2. **Study Forge's Design**\n   - Understand how Forge extends Magit patterns\n   - Learn how Forge handles complex workflows (issues, PRs)\n   - Study how Forge presents API options in transient menus\n   - Examine buffer management for issue tracking\n   - Understand integration patterns with Magit\n\n3. **Analyze Global Flags Handling**\n   - How does Magit handle Git's global flags (--git-dir, --work-tree, etc.)?\n   - How are they exposed in transient menus?\n   - How are they passed to commands?\n   - Should beads use a similar pattern for --actor, --db, --no-daemon, etc.?\n\n4. **Analyze Command Flags Presentation**\n   - Does Magit use prefixes like \"-d\" for its options in transient menus?\n   - How are boolean flags vs value flags differentiated?\n   - How are required vs optional arguments presented?\n   - What visual conventions are used for different flag types?\n\n5. **Update All Transient Issues**\n   - Review every beads.el issue that implements a transient menu\n   - Add text-based preview showing how the menu will look\n   - Update designs to follow Magit/Forge conventions\n   - Ensure consistency across all command implementations\n\n## Deliverables\n\n- Document Magit/Forge design patterns in CLAUDE.md or a new MAGIT_PATTERNS.md\n- Create text-based previews for all transient menus\n- Update existing issues with improved designs\n- Create guidelines for future transient menu implementations","status":"closed","priority":1,"issue_type":"epic","created_at":"2025-10-22T19:15:12.220598293+02:00","updated_at":"2025-10-22T19:28:04.783334205+02:00","closed_at":"2025-10-22T19:28:04.783334205+02:00"}
{"id":"beads.el-66","title":"Clone and analyze Magit repository","description":"Clone the Magit repository (https://github.com/magit/magit) into a reference directory for analysis.\n\n## Tasks\n\n1. Clone Magit repository to a reference location (e.g., magit-reference/)\n2. Explore the repository structure:\n   - Identify main transient menu definitions\n   - Find global flag handling code\n   - Locate command implementation patterns\n3. Read key files:\n   - magit-transient.el (or equivalent)\n   - Main command files (commit, push, pull, etc.)\n   - Global options handling\n\n## Key Questions to Answer\n\n- How is the repository structured?\n- Where are transient menus defined?\n- How are global Git flags handled?\n- What naming conventions are used?\n- How are buffers organized and managed?","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-22T19:15:25.086964099+02:00","updated_at":"2025-10-22T19:27:48.396488941+02:00","closed_at":"2025-10-22T19:27:48.396488941+02:00","dependencies":[{"issue_id":"beads.el-66","depends_on_id":"beads.el-65","type":"parent-child","created_at":"2025-10-22T19:15:25.096245962+02:00","created_by":"daemon"}]}
{"id":"beads.el-67","title":"Clone and analyze Forge repository","description":"Clone the Transient library repository (https://github.com/magit/transient) for understanding best practices.\n\n## Tasks\n\n1. Clone Transient repository to a reference location (e.g., transient-reference/)\n2. Read documentation:\n   - README.md\n   - Manual/documentation files\n   - Examples\n3. Study the library code:\n   - Core transient definition macros\n   - Infix and suffix patterns\n   - Group layout options\n   - State management\n\n## Key Questions to Answer\n\n- What are the recommended patterns for transient menus?\n- How should infixes (options) be defined?\n- How should suffixes (commands) be defined?\n- What group layouts are available?\n- How should transient state be managed?\n- What visual conventions exist for different option types?","design":"Clone the Forge repository (https://github.com/magit/forge) for understanding Magit-style interfaces.\n\n## Tasks\n\n1. Clone Forge repository to a reference location (e.g., forge-reference/)\n2. Read documentation:\n   - README.md\n   - Manual/documentation files\n   - Examples\n3. Study the Forge code:\n   - How Forge extends Magit's patterns\n   - Transient menu definitions in Forge\n   - How Forge handles GitHub/GitLab API options\n   - Buffer management and navigation patterns\n   - Integration patterns with Magit\n\n## Key Questions to Answer\n\n- How does Forge organize its transient menus?\n- What patterns does it follow from Magit?\n- How does it handle API-related flags and options?\n- How are complex workflows (issues, PRs) presented in transient menus?\n- What buffer management patterns does it use?\n- How does it integrate with Magit's existing interfaces?","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-22T19:15:35.436377986+02:00","updated_at":"2025-10-22T19:27:48.405141561+02:00","closed_at":"2025-10-22T19:27:48.405141561+02:00","dependencies":[{"issue_id":"beads.el-67","depends_on_id":"beads.el-65","type":"parent-child","created_at":"2025-10-22T19:15:35.446724609+02:00","created_by":"daemon"}]}
{"id":"beads.el-68","title":"Document Magit and Forge design patterns","description":"Based on analysis of Magit and Transient, document design patterns for beads.el to follow.\n\n## Tasks\n\n1. Create MAGIT_PATTERNS.md (or add to CLAUDE.md) documenting:\n   - Transient menu structure and organization\n   - Naming conventions for commands and options\n   - Key binding conventions\n   - Global flags handling patterns\n   - Command flag presentation (use of \"-d\", \"=\", etc.)\n   - Visual conventions for different option types\n   - Buffer management patterns\n   - State management patterns\n\n2. Include examples from Magit showing:\n   - A complete transient menu definition\n   - How global flags are exposed\n   - How required vs optional arguments are presented\n   - How boolean vs value flags are differentiated\n\n3. Define guidelines for beads.el:\n   - How to handle beads global flags (--actor, --db, --no-daemon, etc.)\n   - Recommended key binding conventions\n   - Standard transient menu layout\n   - Naming conventions to follow\n\n## Deliverable\n\nA comprehensive document that serves as a reference for all future beads.el transient menu implementations.","design":"Based on analysis of Magit and Forge, document design patterns for beads.el to follow.\n\n## Tasks\n\n1. Create MAGIT_PATTERNS.md (or add to CLAUDE.md) documenting:\n   - Transient menu structure and organization\n   - Naming conventions for commands and options\n   - Key binding conventions\n   - Global flags handling patterns\n   - Command flag presentation (use of \"-d\", \"=\", etc.)\n   - Visual conventions for different option types\n   - Buffer management patterns\n   - State management patterns\n   - How Forge extends Magit patterns\n\n2. Include examples from Magit and Forge showing:\n   - A complete transient menu definition\n   - How global flags are exposed\n   - How required vs optional arguments are presented\n   - How boolean vs value flags are differentiated\n   - How Forge handles complex issue/PR workflows\n\n3. Define guidelines for beads.el:\n   - How to handle beads global flags (--actor, --db, --no-daemon, etc.)\n   - Recommended key binding conventions\n   - Standard transient menu layout\n   - Naming conventions to follow\n   - Buffer management patterns for issue tracking\n\n## Deliverable\n\nA comprehensive document that serves as a reference for all future beads.el transient menu implementations.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-22T19:15:49.957789688+02:00","updated_at":"2025-10-22T19:27:48.413802645+02:00","closed_at":"2025-10-22T19:27:48.413802645+02:00","dependencies":[{"issue_id":"beads.el-68","depends_on_id":"beads.el-65","type":"parent-child","created_at":"2025-10-22T19:15:49.96809343+02:00","created_by":"daemon"},{"issue_id":"beads.el-68","depends_on_id":"beads.el-66","type":"blocks","created_at":"2025-10-22T19:15:49.976971198+02:00","created_by":"daemon"},{"issue_id":"beads.el-68","depends_on_id":"beads.el-67","type":"blocks","created_at":"2025-10-22T19:15:49.985723598+02:00","created_by":"daemon"}]}
{"id":"beads.el-69","title":"Create text-based transient menu previews for all command issues","description":"After documenting Magit/Forge patterns, update all existing beads.el issues that implement transient menus to include text-based previews.\n\n## Issues to Update\n\nReview and update the following issues with transient menu previews:\n\n- beads.el-5: bd create command\n- beads.el-6: bd update command\n- beads.el-7: bd close command\n- beads.el-8: bd dep commands\n- beads.el-24: bd compact command\n- beads.el-27: bd label commands\n- beads.el-30: bd reopen command\n- Any other issues that implement transient menus\n\n## For Each Issue\n\nAdd a section showing:\n1. **Text-based preview** of how the transient menu will look\n2. **Key bindings** and their purposes\n3. **Grouped layout** showing how options are organized\n4. **Visual conventions** for different flag types\n5. **Context-aware behavior** notes\n\n## Preview Format\n\nUse ASCII art to show the transient menu structure, similar to how Magit documentation shows menus:\n\n```\nTransient: Create Issue\n\nArguments\n -p, --priority=\u003cn\u003e  Priority (0-4, 0=highest)\n -t, --type=\u003ctype\u003e   Issue type (bug|feature|task|epic|chore)\n -d, --description   Description\n\nActions\n c  Create issue\n p  Preview command\n r  Reset\n```\n\n## Goal\n\nEnsure all transient menu designs are consistent and follow Magit/Forge conventions before implementation.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-22T19:17:40.435256985+02:00","updated_at":"2025-10-22T19:27:48.422828314+02:00","closed_at":"2025-10-22T19:27:48.422828314+02:00","dependencies":[{"issue_id":"beads.el-69","depends_on_id":"beads.el-65","type":"parent-child","created_at":"2025-10-22T19:17:40.44472881+02:00","created_by":"daemon"},{"issue_id":"beads.el-69","depends_on_id":"beads.el-68","type":"blocks","created_at":"2025-10-22T19:17:40.454826229+02:00","created_by":"daemon"}]}
{"id":"beads.el-7","title":"beads.el: Transient menus for remaining bd commands","description":"Implement transient menus for all remaining bd commands.\n\nCommands to implement:\n\n1. **bd close** - Close issues\n   - Support multiple issue IDs\n   - Reason flag (--reason)\n   - Batch close from marked items\n\n2. **bd dep** - Dependency submenu\n   - dep add (from-id, to-id, --type)\n   - dep remove (from-id, to-id)\n   - dep tree (issue-id) - maybe special visualization\n   - dep list (issue-id)\n\n3. **bd list** - Enhanced list with filters\n   - Status filter (--status)\n   - Type filter (--type)\n   - Priority filter (--priority)\n   - Format option (--format)\n\n4. **bd stats** - Statistics display\n   - Show in special buffer with formatting\n\n5. **bd export** - Export to JSONL\n   - Output path (-o/--output)\n\n6. **bd import** - Import from JSONL\n   - Input path (-i/--input)\n   - Dry run (--dry-run)\n   - Resolve collisions (--resolve-collisions)\n\n7. **bd init** - Initialize bd\n   - Prefix (--prefix)\n   - DB path (--db)\n\nGlobal flags accessible from all commands:\n- --actor, --db, --json, --no-auto-flush, --no-auto-import","acceptance_criteria":"## Acceptance Criteria\n\nAll remaining bd commands must have transient menu implementations:\n\n### bd close\n- [ ] Transient menu for closing issues\n- [ ] Support single issue ID\n- [ ] Support multiple issue IDs from marked items\n- [ ] Reason flag (--reason) with text input\n- [ ] Confirmation before closing\n- [ ] Refresh buffers after close\n\n### bd dep (Dependency submenu)\n- [ ] Parent transient menu for dependencies\n- [ ] **dep add**: from-id, to-id, --type (blocks, related, parent-child, discovered-from)\n- [ ] **dep remove**: from-id, to-id with confirmation\n- [ ] **dep tree**: issue-id, display in special buffer with tree visualization\n- [ ] **dep list**: issue-id, display in tabulated-list buffer\n- [ ] Context-aware: use current issue from list/show buffer\n\n### bd list (Enhanced filtering)\n- [ ] Transient menu with filter options\n- [ ] Status filter (--status) with multi-select\n- [ ] Type filter (--type) with multi-select\n- [ ] Priority filter (--priority) with multi-select\n- [ ] Format option (--format)\n- [ ] Results displayed in list buffer\n\n### bd stats\n- [ ] Execute bd stats --json\n- [ ] Display in special formatted buffer\n- [ ] Show: total issues, by status, by priority, by type\n- [ ] Visual representation (progress bars, percentages)\n\n### bd export\n- [ ] Transient menu for export\n- [ ] Output path (-o/--output) with file completion\n- [ ] Default to .beads/issues.jsonl\n- [ ] Confirmation if file exists\n- [ ] Success message with exported count\n\n### bd import\n- [ ] Transient menu for import\n- [ ] Input path (-i/--input) with file completion\n- [ ] Dry run flag (--dry-run) toggle\n- [ ] Resolve collisions flag (--resolve-collisions) toggle\n- [ ] Show import preview if dry-run\n- [ ] Confirmation before actual import\n- [ ] Display results (imported, skipped, collisions)\n\n### bd init\n- [ ] Transient menu for initialization\n- [ ] Prefix flag (--prefix) with default suggestions\n- [ ] DB path flag (--db) with file completion\n- [ ] Validation that directory is not already initialized\n- [ ] Success message with created paths\n\n### Global Flags\n- [ ] All menus support --actor flag\n- [ ] All menus support --db flag\n- [ ] All menus support --json flag (automatic)\n- [ ] All menus support --no-auto-flush flag\n- [ ] All menus support --no-auto-import flag\n- [ ] Global flag values persist within session\n\n## Test Coverage (ERT)\nTests in lisp/test/beads-transient-misc-test.el:\n\n- [ ] **bd close**\n  - Test single close command\n  - Test batch close from marked items\n  - Test with/without reason\n  - Test confirmation dialog\n\n- [ ] **bd dep**\n  - Test dep add with all types\n  - Test dep remove with confirmation\n  - Test dep tree visualization\n  - Test dep list display\n  - Test context awareness\n\n- [ ] **bd list filters**\n  - Test filter command construction\n  - Test multi-select filters\n  - Test filter combinations\n  - Test result display\n\n- [ ] **bd stats**\n  - Mock stats JSON response\n  - Test stats buffer creation\n  - Test formatted display\n  - Test visual elements\n\n- [ ] **bd export**\n  - Test export command construction\n  - Test file path handling\n  - Test overwrite confirmation\n  - Mock export execution\n\n- [ ] **bd import**\n  - Test import command with flags\n  - Test dry-run mode\n  - Test collision resolution\n  - Mock import results\n\n- [ ] **bd init**\n  - Test init command construction\n  - Test path validation\n  - Mock initialization\n\n- [ ] **Global Flags**\n  - Test global flag inheritance\n  - Test session persistence\n  - Test flag overrides\n\nTest coverage should be \u003e65% for misc transient functionality.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:15.327419699+02:00","closed_at":"2025-10-16T22:22:48.840224104+02:00","dependencies":[{"issue_id":"beads.el-7","depends_on_id":"beads.el-1","type":"discovered-from","created_at":"2025-10-22T19:07:36.569979335+02:00","created_by":"import"},{"issue_id":"beads.el-7","depends_on_id":"beads.el-2","type":"blocks","created_at":"2025-10-22T19:07:36.577426008+02:00","created_by":"import"}]}
{"id":"beads.el-70","title":"Review and update beads-create.el transient menu","description":"Review the existing beads-create.el transient menu implementation and update\nit to follow Magit/Forge design patterns documented in MAGIT_PATTERNS.md.\n\n## Current Implementation\n\nThe beads-create.el module implements the transient menu for `bd create`\ncommand.\n\n## Review Checklist\n\nBased on MAGIT_PATTERNS.md:\n\n- [ ] Arguments section comes before actions\n- [ ] Flags use `-X` short form and `--long-form` format\n- [ ] Descriptions are concise and explain the effect\n- [ ] Actions are grouped into logical columns with headers\n- [ ] Key bindings follow Magit conventions\n- [ ] Preview and reset commands have `:transient t`\n- [ ] Advanced options use `:level 5` or `:level 7`\n- [ ] Global flags (--actor, --db) are not exposed in menu\n- [ ] Validation is clear and user-friendly\n\n## Tasks\n\n1. [ ] Read current implementation\n2. [ ] Compare against MAGIT_PATTERNS.md guidelines\n3. [ ] Create text-based preview of current menu\n4. [ ] Identify areas needing updates\n5. [ ] Update implementation to match patterns\n6. [ ] Add/update text-based preview in this issue\n7. [ ] Run tests to ensure nothing broke\n8. [ ] Update documentation if needed","design":"## Complete Menu Structure (All bd create flags)\n\n```\nCreate Issue\n────────────────────────────────────────────────────────────\n\nRequired\n T  Title         Issue title (required)\n\nArguments\n -t, --type       Issue type (bug|feature|task|epic|chore, default: task)\n -p, --priority   Priority (0-4, 0=highest, default: 2)\n -a, --assignee   Assignee name\n -l, --labels     Labels (comma-separated)\n --external-ref   External reference (e.g., gh-9, jira-ABC)\n\nMulti-line Fields\n -d, --description    Multi-line description\n --acceptance         Acceptance criteria (multi-line)\n --design             Design notes (multi-line)\n\nAdvanced Options (Level 5)\n -i, --id         Custom ID (for parallel workers)\n -D, --deps       Dependencies (format: type:id,type:id)\n -f, --file       Create multiple issues from markdown file\n --force          Force creation even if prefix doesn't match\n --title          Issue title (alternative to positional argument)\n\nActions\n x  Create issue\n p  Preview command\n R  Reset\n q  Quit\n```\n\n## Flag Implementation Plan\n\n### Already Implemented (6 flags)\n- ✓ Title (positional argument)\n- ✓ `-t, --type` - Issue type\n- ✓ `-p, --priority` - Priority\n- ✓ `-d, --description` - Description (multi-line)\n- ✓ `--id` - Custom ID\n- ✓ `--deps` - Dependencies\n\n### New Flags to Implement (8 flags)\n\n#### Simple String Arguments\n1. **`-a, --assignee`** - Assignee name\n   - Key: `-a`\n   - Simple string input via read-string\n   - Add to Arguments section\n\n2. **`-l, --labels`** - Labels (comma-separated)\n   - Key: `-l`\n   - String input with comma-separated values\n   - Add to Arguments section\n   - Example: \"bug,urgent,frontend\"\n\n3. **`--external-ref`** - External reference\n   - Key: `-e`\n   - String input for external issue references\n   - Add to Arguments section\n   - Example: \"gh-123\", \"jira-ABC-456\"\n\n#### Multi-line Text Fields\n4. **`--acceptance`** - Acceptance criteria\n   - Key: `-A`\n   - Multi-line editor (like description)\n   - Add to Multi-line Fields section\n   - Markdown editing recommended\n\n5. **`--design`** - Design notes\n   - Key: `-D` (conflicts with deps, use uppercase)\n   - Multi-line editor (like description)\n   - Add to Multi-line Fields section\n   - Markdown editing recommended\n\n#### Advanced Options\n6. **`-f, --file`** - Create from markdown file\n   - Key: `-f`\n   - File path via read-file-name\n   - Add to Advanced Options (level 5)\n   - When set, disables other fields (different mode)\n\n7. **`--force`** - Force creation\n   - Key: `-F`\n   - Boolean toggle (transient-switch)\n   - Add to Advanced Options (level 5)\n   - Used when prefix doesn't match database\n\n8. **`--title`** - Alternative title flag\n   - Key: `-T` (alternative to positional T)\n   - Add to Advanced Options (level 5)\n   - Note: Mostly redundant with positional title\n\n## Key Binding Assignments\n\n### Currently Used Keys\n- `T`: Title (required, positional)\n- `-t`: Type\n- `-p`: Priority\n- `-d`: Description (multi-line)\n- `-i`: Custom ID (advanced)\n- `-D`: Dependencies (advanced) ← CONFLICT with --design\n- `x`: Execute create\n- `p`: Preview\n- `R`: Reset\n- `q`: Quit\n\n### New Key Assignments\n- `-a`: Assignee\n- `-l`: Labels\n- `-e`: External reference\n- `-A`: Acceptance criteria (multi-line)\n- `-G`: Design notes (multi-line) [avoiding -D conflict]\n- `-f`: File (advanced)\n- `-F`: Force flag (advanced)\n- `-T`: Title as flag (advanced, redundant)\n\n### Resolving -D Conflict\nCurrent: `-D` is used for `--deps`\nCLI has: `-D` is not defined (deps is --deps only)\n\n**Solution**: Keep `-D` for deps (established), use `-G` for design (G for \"desinG\" notes).\n\n## Implementation Details\n\n### State Variables to Add\n```elisp\n(defvar beads-create--assignee nil)\n(defvar beads-create--labels nil)\n(defvar beads-create--external-ref nil)\n(defvar beads-create--acceptance nil)\n(defvar beads-create--design nil)\n(defvar beads-create--file nil)\n(defvar beads-create--force nil)\n(defvar beads-create--title-flag nil)\n```\n\n### Reset Function Update\nAdd new variables to `beads-create--reset-state`.\n\n### Build Command Args Update\nAdd flags to `beads-create--build-command-args`:\n- `-a` / `--assignee`\n- `-l` / `--labels`\n- `--external-ref`\n- `--acceptance`\n- `--design`\n- `-f` / `--file`\n- `--force` (boolean flag)\n- `--title` (if using flag instead of positional)\n\n### Menu Organization\nGroup flags logically:\n1. **Required**: Title only\n2. **Arguments**: Common flags (type, priority, assignee, labels, external-ref)\n3. **Multi-line Fields**: Description, acceptance, design\n4. **Advanced Options**: id, deps, file, force, title-flag (all level 5)\n5. **Actions**: Execute, preview, reset, quit\n\n## Validation Updates\n\n### New Validations Needed\n- **Labels format**: Optional, but if set should be comma-separated\n- **External ref format**: Optional, no strict format but should be non-empty if set\n- **File mode**: When `--file` is set, title becomes optional (file contains issues)\n\n### Validation Logic\n```elisp\n(defun beads-create--validate-file-mode ()\n  \"Check if in file mode, which changes requirements.\"\n  (when beads-create--file\n    ;; In file mode, title is not required\n    ;; File must exist and be readable\n    (unless (file-readable-p beads-create--file)\n      \"File must exist and be readable\")))\n```\n\n## Testing Considerations\n\nUpdate tests to cover:\n- All new flags individually\n- Multi-line fields (acceptance, design)\n- File mode (--file disables normal title requirement)\n- Force flag (boolean)\n- Label parsing (comma-separated)\n- External ref format\n\n## Implementation Order\n\n1. Add simple string arguments: assignee, labels, external-ref\n2. Add multi-line fields: acceptance, design\n3. Add advanced file option: --file\n4. Add boolean force flag: --force\n5. Add redundant title flag: --title\n6. Update validation logic\n7. Update tests\n8. Update documentation","acceptance_criteria":"## Proper Transient Implementation (Following Manual)\n\n### Correct Approach: Use Transient's Built-in Argument System\n\n**Key Principle**: Transient manages infix state automatically. Suffix commands retrieve arguments via `(transient-args 'PREFIX-NAME)`.\n\n### Implementation Pattern\n\n```elisp\n;; Define arguments using transient-define-argument\n(transient-define-argument beads-create:--type ()\n  :description \"Issue type\"\n  :class 'transient-option\n  :key \"-t\"\n  :argument \"--type=\"\n  :choices '(\"bug\" \"feature\" \"task\" \"epic\" \"chore\"))\n\n;; Define switches (boolean flags)\n(transient-define-argument beads-create:--force ()\n  :description \"Force creation\"\n  :class 'transient-switch\n  :key \"-F\"\n  :argument \"--force\")\n\n;; Suffix command retrieves all arguments\n(transient-define-suffix beads-create--execute ()\n  :key \"x\"\n  :description \"Create issue\"\n  (interactive)\n  (let ((args (transient-args 'beads-create)))\n    ;; args is a list like: (\"--type=bug\" \"--priority=1\" \"--force\")\n    (apply #'beads--run-command \"create\" args)))\n```\n\n### Handling Multi-line Fields\n\nMulti-line fields (description, acceptance, design) need special handling since they can't be simple transient arguments:\n\n```elisp\n;; Custom state for multi-line content\n(defvar beads-create--description nil)\n\n;; Suffix that opens editor\n(transient-define-suffix beads-create:--description ()\n  :key \"-d\"\n  :description \"Edit description\"\n  :transient t\n  (interactive)\n  (beads-create--edit-text-multiline\n   beads-create--description\n   (lambda (text) (setq beads-create--description text))\n   \"Description\"))\n\n;; In execute, combine transient args with custom fields\n(transient-define-suffix beads-create--execute ()\n  (interactive)\n  (let ((args (transient-args 'beads-create)))\n    (when beads-create--description\n      (setq args (append args (list \"-d\" beads-create--description))))\n    (apply #'beads--run-command \"create\" args)))\n```\n\n### Complete Argument List for bd create\n\n#### Simple Arguments (transient-option)\n- `--type=` - Issue type (with :choices)\n- `--priority=` - Priority (with :choices or :reader)\n- `--assignee=` - Assignee name\n- `--labels=` - Comma-separated labels\n- `--external-ref=` - External reference\n- `--id=` - Custom ID\n- `--deps=` - Dependencies\n- `--file=` - Markdown file path\n- Title (positional or `--title=`)\n\n#### Boolean Switches (transient-switch)\n- `--force` - Force creation\n\n#### Multi-line Fields (custom state + suffix)\n- `-d, --description` - Description text\n- `--acceptance` - Acceptance criteria\n- `--design` - Design notes\n\n### Refactoring Checklist\n\n- [ ] Remove custom state variables for simple arguments\n- [ ] Define arguments using transient-define-argument\n- [ ] Use transient-define-argument for options with choices\n- [ ] Use transient-switch class for boolean --force flag\n- [ ] Keep custom state only for multi-line fields\n- [ ] Update --execute to use (transient-args 'beads-create)\n- [ ] Update --preview to use (transient-args 'beads-create)\n- [ ] Update --reset to call (transient-reset) for transient args\n- [ ] Test that all 14 flags work correctly\n- [ ] Ensure tests pass (921/921)\n- [ ] Ensure lint passes\n- [ ] Ensure compilation passes\n\n### Benefits of Proper Approach\n\n1. **Less code**: No manual state management for most arguments\n2. **Persistence**: Transient can save/restore argument values across sessions\n3. **Consistency**: Follows patterns used by Magit and other Emacs tools\n4. **Validation**: Transient handles :choices validation automatically\n5. **History**: Transient provides history for argument values\n\n### File Mode Special Handling\n\nWhen `--file` is set, title becomes optional:\n\n```elisp\n(transient-define-suffix beads-create--execute ()\n  (interactive)\n  (let ((args (transient-args 'beads-create)))\n    ;; Check if in file mode\n    (if (seq-some (lambda (arg) (string-prefix-p \"--file=\" arg)) args)\n        ;; File mode: title optional\n        (apply #'beads--run-command \"create\" args)\n      ;; Normal mode: title required\n      (unless (seq-some (lambda (arg) (string-prefix-p \"--title=\" arg)) args)\n        (user-error \"Title is required\"))\n      (apply #'beads--run-command \"create\" args))))\n```","notes":"After reviewing transient manual, key insights for implementation:\n\n1. **Use transient-args, not custom state variables**: Transient manages argument state automatically. Use (transient-args 'beads-create) in suffix commands to get all active arguments.\n\n2. **Proper infix classes**:\n   - transient-option: For flags with values (--type=value)\n   - transient-switch: For boolean flags (--force)\n   - transient-argument: Use transient-define-argument for actual CLI arguments\n\n3. **Arguments vs custom state**:\n   - Simple flags: Use transient's built-in :argument handling\n   - Multi-line fields: May need custom state + transient-define-suffix\n   - Retrieve with (transient-args 'beads-create) in suffix commands\n\n4. **Key properties**:\n   - :class - Infix class (transient-option, transient-switch, etc.)\n   - :argument - The actual CLI flag (e.g., \"--type=\")\n   - :key - Key binding in menu\n   - :description - Menu description (can be function for dynamic)\n   - :reader - Function to read user input (optional)\n   - :level - Hide advanced options (5 or 7)\n   - :transient t - Keep menu open after suffix execution\n\n5. **Current implementation issues**:\n   - We're using custom state variables (beads-create--title, etc.)\n   - Should migrate to transient's argument system where possible\n   - Use transient-args in beads-create--execute to get all arguments\n   - Multi-line fields might still need custom handling\n\n6. **Better approach**:\n   - Define arguments using transient-define-argument\n   - Let transient manage state automatically\n   - In --execute, use (transient-args 'beads-create) to get list of args\n   - Parse that list to build bd command\n\nThis is a significant refactor but aligns with transient best practices.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-22T19:34:14.619389732+02:00","updated_at":"2025-10-23T12:16:30.99918584+02:00","closed_at":"2025-10-23T11:48:33.642469937+02:00","dependencies":[{"issue_id":"beads.el-70","depends_on_id":"beads.el-1","type":"blocks","created_at":"2025-10-22T19:34:14.635786511+02:00","created_by":"daemon"}]}
{"id":"beads.el-71","title":"Review and update beads-update.el transient menu","description":"Review the existing beads-update.el transient menu implementation and update\nit to follow Magit/Forge design patterns documented in MAGIT_PATTERNS.md.\n\n## Current Implementation\n\nThe beads-update.el module implements the transient menu for `bd update`\ncommand.\n\n## Review Checklist\n\nBased on MAGIT_PATTERNS.md:\n\n- [ ] Arguments section comes before actions\n- [ ] Flags use `-X` short form and `--long-form` format\n- [ ] Descriptions are concise and explain the effect\n- [ ] Actions are grouped into logical columns with headers\n- [ ] Key bindings follow Magit conventions\n- [ ] Context-aware: detects issue from buffer\n- [ ] Preview and reset commands have `:transient t`\n- [ ] Advanced options use `:level 5` or `:level 7`\n- [ ] Global flags (--actor, --db) are not exposed in menu\n- [ ] Validation is clear and user-friendly\n\n## Tasks\n\n1. [ ] Read current implementation\n2. [ ] Compare against MAGIT_PATTERNS.md guidelines\n3. [ ] Create text-based preview of current menu\n4. [ ] Identify areas needing updates\n5. [ ] Update implementation to match patterns\n6. [ ] Add/update text-based preview in this issue\n7. [ ] Run tests to ensure nothing broke\n8. [ ] Update documentation if needed","design":"## Current Menu Structure\n\n```\nUpdate Issue: \u003cissue-id\u003e\n────────────────────────────────────────────────────────────\n\nIssue Details\n Status \u0026 Priority      Basic Info\n  s  Status             t  Title\n  p  Priority           a  Assignee\n  T  Type               x  External Ref\n\nContent Fields\n d  Description\n A  Acceptance Criteria\n D  Design\n n  Notes\n\nActions\n u  Update issue\n P  Preview command\n r  Reset all changes\n q  Quit\n```\n\n## Current Implementation Analysis\n\n**Good Practices:**\n- ✓ Context-aware: Auto-detects issue ID from buffers\n- ✓ Pre-loads current issue data\n- ✓ Validation functions\n- ✓ Preview and reset functionality\n- ✓ Multiline editing for long text fields\n\n**Needs Update (per MAGIT_PATTERNS.md):**\n\n1. **Arguments Format**\n   - Current: Custom infixes with single-letter keys\n   - Should: Use flag-style format (`-s`, `--status=`)\n   - Should: Group into \"Arguments\" section\n\n2. **Menu Structure**\n   - Current: \"Issue Details\" → nested groups, \"Content Fields\", \"Actions\"\n   - Should: \"Arguments\" section first, then \"Actions\"\n   - Should: Use proper Magit-style grouping\n\n3. **Key Bindings**\n   - Current: Mix of uppercase/lowercase without clear pattern\n   - Should: Use flag letters consistently (`-s`, `-p`, `-t`, etc.)\n\n## Proposed Updated Menu\n\n```\nUpdate Issue: \u003cissue-id\u003e\n────────────────────────────────────────────────────────────\n\nArguments\n -s, --status=\u003cstatus\u003e    Issue status (open|in_progress|blocked|closed)\n -p, --priority=\u003cn\u003e       Priority (0-4, 0=highest)\n -t, --type=\u003ctype\u003e        Issue type (bug|feature|task|epic|chore)\n -T, --title=\u003ctext\u003e       Issue title\n -a, --assignee=\u003cname\u003e    Assignee name\n -x, --external-ref=\u003cref\u003e External reference (e.g., gh-123)\n\nContent (multiline)\n -d, --description        Multi-line description\n -A, --acceptance         Acceptance criteria  \n -D, --design             Design notes\n -n, --notes              Additional notes\n\nActions\n u  Update issue\n p  Preview command\n r  Reset\n q  Quit\n```\n\n## Implementation Recommendations\n\n1. **Keep context-aware approach** - Very good!\n\n2. **Update transient definition:**\n   - Convert to argument-style infixes\n   - Group basic flags and content flags separately\n   - Show current values in flag descriptions\n\n3. **Key bindings:**\n   - Use short flag letters as keys\n   - Uppercase for similar but different fields (e.g., `-t` type, `-T` title)\n   - Consistent pattern throughout\n\n4. **Current value display:**\n   - Keep showing current values\n   - Use transient faces for visual feedback\n   - Show \"current: X\" or similar in descriptions\n\n5. **Multiline editing:**\n   - Keep existing multiline functionality\n   - Maybe add `:level 5` for less-used fields like notes","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-22T19:34:29.860325704+02:00","updated_at":"2025-10-22T19:36:43.447530967+02:00","dependencies":[{"issue_id":"beads.el-71","depends_on_id":"beads.el-1","type":"blocks","created_at":"2025-10-22T19:34:29.870931706+02:00","created_by":"daemon"}]}
{"id":"beads.el-72","title":"Review and update beads-close.el transient menu","description":"Review the existing beads-close.el transient menu implementation and update\nit to follow Magit/Forge design patterns documented in MAGIT_PATTERNS.md.\n\n## Current Implementation\n\nThe beads-close.el module implements the transient menu for `bd close`\ncommand.\n\n## Review Checklist\n\nBased on MAGIT_PATTERNS.md:\n\n- [ ] Arguments section comes before actions\n- [ ] Flags use `-X` short form and `--long-form` format\n- [ ] Descriptions are concise and explain the effect\n- [ ] Actions are grouped into logical columns with headers\n- [ ] Key bindings follow Magit conventions (k for close/kill)\n- [ ] Context-aware: works from show/list buffers\n- [ ] Batch close from marked items supported\n- [ ] Preview and reset commands have `:transient t`\n- [ ] Advanced options use `:level 5` or `:level 7`\n- [ ] Global flags (--actor, --db) are not exposed in menu\n- [ ] Validation is clear and user-friendly\n- [ ] Confirmation prompt for destructive operations\n\n## Tasks\n\n1. [ ] Read current implementation\n2. [ ] Compare against MAGIT_PATTERNS.md guidelines\n3. [ ] Create text-based preview of current menu\n4. [ ] Identify areas needing updates\n5. [ ] Update implementation to match patterns\n6. [ ] Add/update text-based preview in this issue\n7. [ ] Run tests to ensure nothing broke\n8. [ ] Update documentation if needed","design":"## Current Menu Structure\n\n```\nClose Issue(s)\n────────────────────────────────────────────────────────────\n\nOptions\n r  Reason for closing\n\nActions\n c  Close issue(s)\n P  Preview command\n R  Reset\n q  Quit\n```\n\n## Current Implementation Analysis\n\n**Good Practices:**\n- ✓ Context-aware: Works from list and show buffers\n- ✓ Batch close from marked items\n- ✓ Confirmation prompts\n- ✓ Preview functionality\n\n**Needs Update (per MAGIT_PATTERNS.md):**\n\n1. **Arguments Format**\n   - Current: \"Options\" section\n   - Should: \"Arguments\" section following Magit\n   - Should: Use `-r, --reason=\u003ctext\u003e` format\n\n2. **Key Bindings**\n   - Current: `c` for close, `P` for preview, `R` for reset\n   - Should: Consider `k` for close/kill (Magit convention)\n   - Or keep `c` if more intuitive for \"close\"\n\n## Proposed Updated Menu\n\n```\nClose Issue(s)\n────────────────────────────────────────────────────────────\n\nArguments\n -r, --reason=\u003ctext\u003e    Reason for closing\n\nActions\n k  Close issue(s)\n p  Preview\n x  Reset\n q  Quit\n```\n\n## Implementation Recommendations\n\n1. **Keep batch operation support** - Excellent feature!\n\n2. **Confirmation:**\n   - Continue showing clear confirmation for destructive ops\n   - Show count: \"Close 5 issues?\"\n\n3. **Key bindings:**\n   - Consider `k` for \"kill/close\" (matches Magit)\n   - Lowercase `p` and `x` for preview/reset (consistency)\n\n4. **Context awareness:**\n   - Keep auto-detection from buffers\n   - Support marked items in list buffer","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-22T19:34:31.574148083+02:00","updated_at":"2025-10-22T19:37:06.440142022+02:00","dependencies":[{"issue_id":"beads.el-72","depends_on_id":"beads.el-1","type":"blocks","created_at":"2025-10-22T19:34:31.58356775+02:00","created_by":"daemon"}]}
{"id":"beads.el-73","title":"Review and update beads-dep.el transient menu","description":"Review the existing beads-dep.el transient menu implementation and update\nit to follow Magit/Forge design patterns documented in MAGIT_PATTERNS.md.\n\n## Current Implementation\n\nThe beads-dep.el module implements transient menus for `bd dep` subcommands:\n- dep add\n- dep remove  \n- dep tree\n- dep cycles\n- dep list\n\n## Review Checklist\n\nBased on MAGIT_PATTERNS.md:\n\n- [ ] Parent menu uses multi-character bindings (e.g., \"d a\" for dep add)\n- [ ] Arguments section comes before actions\n- [ ] Flags use `-X` short form and `--long-form` format\n- [ ] Descriptions are concise and explain the effect\n- [ ] Actions are grouped into logical columns with headers\n- [ ] Key bindings follow Magit conventions\n- [ ] Context-aware: detects issue from buffer\n- [ ] Preview and reset commands have `:transient t`\n- [ ] Advanced options use `:level 5` or `:level 7`\n- [ ] Global flags (--actor, --db) are not exposed in menu\n- [ ] Validation is clear and user-friendly\n\n## Tasks\n\n1. [ ] Read current implementation\n2. [ ] Compare against MAGIT_PATTERNS.md guidelines\n3. [ ] Create text-based preview of current menu\n4. [ ] Identify areas needing updates\n5. [ ] Update implementation to match patterns\n6. [ ] Add/update text-based preview in this issue\n7. [ ] Run tests to ensure nothing broke\n8. [ ] Update documentation if needed","design":"## Current Menu Structure\n\n```\nDependency Management\n────────────────────────────────────────────────────────────\n\nManage Dependencies\n a  Add dependency\n r  Remove dependency\n l  List dependencies\n t  Show dependency tree\n c  Check for cycles\n\nq  Quit\n```\n\n## Current Implementation Analysis\n\n**Good Practices:**\n- ✓ Parent menu dispatches to subcommands\n- ✓ Clear organization\n- ✓ All bd dep subcommands covered\n\n**Needs Update (per MAGIT_PATTERNS.md):**\n\n1. **Multi-Character Bindings**\n   - Current: Single letters `a`, `r`, `l`, `t`, `c`\n   - Should: Consider multi-char like Forge (`d a`, `d r`, etc.)\n   - OR: Keep single-letter if this IS the dep menu (fine as-is)\n\n2. **Menu Structure**\n   - Current: Single column layout\n   - Should: Consider grouping into columns\n   - E.g., \"Add/Remove\" vs \"View\" operations\n\n## Proposed Updated Menu\n\nOption 1 (Keep current, just reorganize):\n```\nDependencies\n────────────────────────────────────────────────────────────\n\nModify               View\n a  Add dependency    l  List dependencies\n r  Remove dep        t  Show tree\n                      c  Check cycles\n\nq  Quit\n```\n\nOption 2 (Expand with arguments for add/remove):\n```\nDependencies\n────────────────────────────────────────────────────────────\n\nModify               View\n a  Add dependency    l  List dependencies\n r  Remove dep        t  Show dependency tree\n                      c  Check for cycles\n\nq  Quit\n```\n\nEach subcommand (`a`, `r`) would open its own transient with arguments.\n\n## Implementation Recommendations\n\n1. **Keep hierarchical structure** - Works well\n\n2. **Subcommand menus:**\n   - `beads-dep-add` should have its own transient\n   - `beads-dep-remove` should have its own transient\n   - Both should support --type flag for dependency type\n\n3. **Example: beads-dep-add menu:**\n   ```\n   Add Dependency\n   ────────────────────────────────────────────────────────────\n   \n   Arguments\n    -t, --type=\u003ctype\u003e    Dependency type (blocks|depends-on|etc.)\n   \n   Required\n    f  From issue ID\n    t  To issue ID\n   \n   Actions\n    a  Add dependency\n    p  Preview\n    r  Reset\n    q  Quit\n   ```\n\n4. **Context awareness:**\n   - When called from show buffer, pre-fill \"from\" issue\n   - When called from list buffer with selection, pre-fill \"from\"\n\n5. **Tree and cycles:**\n   - Display in dedicated buffers\n   - Consider ASCII tree visualization","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-22T19:34:48.251068791+02:00","updated_at":"2025-10-22T19:37:29.741446516+02:00","dependencies":[{"issue_id":"beads.el-73","depends_on_id":"beads.el-1","type":"blocks","created_at":"2025-10-22T19:34:48.261142849+02:00","created_by":"daemon"}]}
{"id":"beads.el-74","title":"Review and update beads-sync.el transient menu","description":"Review the existing beads-sync.el transient menu implementation and update\nit to follow Magit/Forge design patterns documented in MAGIT_PATTERNS.md.\n\n## Current Implementation\n\nThe beads-sync.el module implements the transient menu for `bd sync`\ncommand.\n\n## Review Checklist\n\nBased on MAGIT_PATTERNS.md:\n\n- [ ] Arguments section comes before actions\n- [ ] Flags use `-X` short form and `--long-form` format\n- [ ] Descriptions are concise and explain the effect\n- [ ] Actions are grouped into logical columns with headers\n- [ ] Key bindings follow Magit conventions (s for sync)\n- [ ] Preview and reset commands have `:transient t`\n- [ ] Advanced options use `:level 5` or `:level 7`\n- [ ] Global flags (--actor, --db) are not exposed in menu\n- [ ] Validation is clear and user-friendly\n\n## Tasks\n\n1. [ ] Read current implementation\n2. [ ] Compare against MAGIT_PATTERNS.md guidelines\n3. [ ] Create text-based preview of current menu\n4. [ ] Identify areas needing updates\n5. [ ] Update implementation to match patterns\n6. [ ] Add/update text-based preview in this issue\n7. [ ] Run tests to ensure nothing broke\n8. [ ] Update documentation if needed","design":"## Current Menu Structure\n\n```\nSync with Remote\n────────────────────────────────────────────────────────────\n\nSync Options\n d  Dry run\n m  Commit message\n P  No pull\n p  No push\n\nActions\n s  Sync\n P  Preview command\n R  Reset fields\n q  Quit\n```\n\n## Current Implementation Analysis\n\n**Good Practices:**\n- ✓ Comprehensive sync workflow\n- ✓ Dry run option\n- ✓ Customizable commit message\n- ✓ Granular control (--no-pull, --no-push)\n\n**Needs Update (per MAGIT_PATTERNS.md):**\n\n1. **Arguments Format**\n   - Current: \"Sync Options\" with custom keys\n   - Should: \"Arguments\" section with flag format\n   - Should: Use `-n, --dry-run` style\n\n2. **Key Bindings**\n   - Current: `d` for dry-run, `P` for no-pull, `p` for no-push\n   - Should: Use flag letters consistently\n\n## Proposed Updated Menu\n\n```\nSync with Remote\n────────────────────────────────────────────────────────────\n\nArguments\n -n, --dry-run         Preview without making changes\n -m, --message=\u003cmsg\u003e   Commit message (default: auto-generated)\n -P, --no-pull         Skip pulling from remote\n -p, --no-push         Skip pushing to remote\n\nActions\n s  Sync\n p  Preview\n r  Reset\n q  Quit\n```\n\n## Implementation Recommendations\n\n1. **Keep comprehensive workflow** - Excellent implementation!\n\n2. **Update to flag format:**\n   - `-n` for dry-run (standard Unix convention)\n   - `-m` for message (matches git commit)\n   - `-P` uppercase for no-pull, `-p` lowercase for no-push\n\n3. **Output:**\n   - Show detailed progress during sync\n   - Display what was synced\n   - Handle errors gracefully\n\n4. **Key bindings in beads-main:**\n   - Current: `S` for Sync - Good! (uppercase = important)","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-22T19:34:49.903116196+02:00","updated_at":"2025-10-22T19:38:26.765797739+02:00","dependencies":[{"issue_id":"beads.el-74","depends_on_id":"beads.el-1","type":"blocks","created_at":"2025-10-22T19:34:49.912567716+02:00","created_by":"daemon"}]}
{"id":"beads.el-75","title":"Review and update beads-main.el root transient menu","description":"Review the existing beads-main.el root transient menu implementation and\nupdate it to follow Magit/Forge design patterns documented in\nMAGIT_PATTERNS.md.\n\n## Current Implementation\n\nThe beads-main.el module implements the root transient menu (M-x beads)\nthat dispatches to all other commands.\n\n## Review Checklist\n\nBased on MAGIT_PATTERNS.md:\n\n- [ ] Similar structure to magit-dispatch and forge-dispatch\n- [ ] Commands grouped by category (Create, List, Manage, etc.)\n- [ ] Multi-character bindings for sub-menus\n- [ ] Clear, hierarchical organization\n- [ ] Key bindings follow Magit conventions\n- [ ] All implemented commands are accessible\n- [ ] Missing commands are noted for future implementation\n- [ ] Help text is clear and informative\n\n## Tasks\n\n1. [ ] Read current implementation\n2. [ ] Compare against magit-dispatch/forge-dispatch\n3. [ ] Create text-based preview of current menu\n4. [ ] Identify areas needing updates\n5. [ ] Update implementation to match patterns\n6. [ ] Add/update text-based preview in this issue\n7. [ ] Verify all commands are accessible\n8. [ ] Update documentation if needed","design":"## Current Menu Structure\n\n```\nBeads Issue Tracker\n────────────────────────────────────────────────────────────\n\nProject: beads.el (/path/to/project)\nDatabase: beads.el.db\nVersion: 0.9.1\n\nView                  Create/Edit           Dependencies\n l  List issues        c  Create issue       d  Dependencies menu\n r  Ready work         u  Update issue       v  Visual graph\n b  Blocked issues     x  Close issue\n s  Show issue         o  Reopen issue\n t  Stats              D  Delete issue\n\nAdmin                 Other\n i  Init project       ?  Quickstart guide\n e  Export to JSONL    g  Refresh menu\n I  Import from JSONL  q  Quit\n S  Sync with remote\n```\n\n## Current Implementation Analysis\n\n**Good Practices:**\n- ✓ Excellent organization into logical groups\n- ✓ Dynamic header showing project context\n- ✓ Clean, consistent key bindings\n- ✓ All implemented commands accessible\n- ✓ Similar structure to Magit/Forge\n\n**Needs Update (per MAGIT_PATTERNS.md):**\n\n1. **Multi-Character Bindings**\n   - Current: All single-letter bindings\n   - Consider: Forge-style multi-char for related commands\n   - E.g., \"l l\" = list all, \"l r\" = ready, \"l b\" = blocked\n\n2. **Menu Grouping**\n   - Current: Good column-based grouping\n   - Could improve: More Forge-like hierarchical organization\n\n## Proposed Enhanced Menu\n\nOption 1 (Keep current, minimal changes):\n```\nBeads Issue Tracker\n────────────────────────────────────────────────────────────\n\nProject: beads.el (/path/to/project)\nDatabase: beads.el.db\nVersion: 0.9.1\n\nList                  Modify                Manage\n l l  List all         c  Create issue       d  Dependencies\n l r  Ready work       u  Update issue       v  Graph\n l b  Blocked          k  Close issue        S  Sync\n l s  Show issue       R  Reopen issue\n l t  Stats            X  Delete issue\n\nSetup                 Other\n i  Init project       ?  Quickstart\n e  Export JSONL       g  Refresh\n I  Import JSONL       q  Quit\n```\n\nOption 2 (More Forge-like with fetch/create/visit):\n```\nBeads\n────────────────────────────────────────────────────────────\n\nProject: beads.el (/path/to/project)\nDatabase: beads.el.db\n\nFetch                 Create               Visit\n f f  sync remote      c i  issue           v i  issue\n f l  refresh list     c e  epic            v l  list\n                                             v r  ready\n                                             v b  blocked\n\nModify                Manage               Configure\n u  Update issue       d  Dependencies      i  Init\n k  Close issue        S  Sync              e  Export\n R  Reopen issue       g  Graph             I  Import\n X  Delete issue       t  Stats\n\nq  Quit\n```\n\n## Implementation Recommendations\n\n1. **Keep current structure** - It's already very good!\n\n2. **Optional: Add multi-char bindings:**\n   - List submenu: `l l`, `l r`, `l b`, `l s`\n   - Create submenu: `c i` (issue), `c e` (epic)\n   - Visit submenu: `v i`, `v l`, `v r`\n\n3. **Header:**\n   - Keep dynamic project info\n   - Maybe add issue counts: \"23 open, 45 closed\"\n\n4. **Consistency:**\n   - Use `k` for close (kill) to match Magit\n   - Use `R` for reopen (uppercase = state change)\n   - Use `X` for delete (uppercase = destructive)\n\n5. **Missing commands:**\n   - Add entries for not-yet-implemented commands\n   - Show them with `:level 0` or as disabled\n\nCurrent implementation is very close to Magit/Forge patterns already!\nMinor tweaks would make it perfect.","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-22T19:35:06.158632766+02:00","updated_at":"2025-10-22T19:38:29.052192161+02:00","dependencies":[{"issue_id":"beads.el-75","depends_on_id":"beads.el-1","type":"blocks","created_at":"2025-10-22T19:35:06.171155039+02:00","created_by":"daemon"}]}
{"id":"beads.el-76","title":"Review and update beads-misc.el transient menus","description":"Review the existing beads-misc.el transient menu implementations and update\nthem to follow Magit/Forge design patterns documented in MAGIT_PATTERNS.md.\n\n## Current Implementation\n\nThe beads-misc.el module implements transient menus for miscellaneous\ncommands like stats, import, export, etc.\n\n## Review Checklist\n\nBased on MAGIT_PATTERNS.md:\n\n- [ ] Arguments section comes before actions\n- [ ] Flags use `-X` short form and `--long-form` format\n- [ ] Descriptions are concise and explain the effect\n- [ ] Actions are grouped into logical columns with headers\n- [ ] Key bindings follow Magit conventions\n- [ ] Preview and reset commands have `:transient t`\n- [ ] Advanced options use `:level 5` or `:level 7`\n- [ ] Global flags (--actor, --db) are not exposed in menu\n- [ ] Validation is clear and user-friendly\n\n## Tasks\n\n1. [ ] Read current implementation\n2. [ ] Compare against MAGIT_PATTERNS.md guidelines\n3. [ ] Create text-based preview for each menu\n4. [ ] Identify areas needing updates\n5. [ ] Update implementation to match patterns\n6. [ ] Add/update text-based previews in this issue\n7. [ ] Run tests to ensure nothing broke\n8. [ ] Update documentation if needed","design":"## Current Menus in beads-misc.el\n\nThe module contains several transient menus:\n\n1. **beads-export** - Export issues to JSONL\n2. **beads-import** - Import issues from JSONL  \n3. **beads-init** - Initialize beads in project\n\n### beads-export Menu\n\n```\nExport to JSONL\n────────────────────────────────────────────────────────────\n\nOptions\n o  Output file path\n\nActions\n e  Export\n P  Preview command\n R  Reset\n q  Quit\n```\n\n### beads-import Menu\n\n```\nImport from JSONL\n────────────────────────────────────────────────────────────\n\nOptions\n i  Input file path\n d  Dry run\n r  Resolve collisions\n\nActions\n I  Import\n P  Preview command\n R  Reset\n q  Quit\n```\n\n### beads-init Menu\n\n```\nInitialize Project\n────────────────────────────────────────────────────────────\n\nOptions\n p  Issue prefix\n d  Database path\n\nActions\n i  Initialize\n P  Preview command\n R  Reset\n q  Quit\n```\n\n## Recommendations\n\nUpdate all menus to follow Magit patterns:\n\n### Updated beads-export\n\n```\nExport to JSONL\n────────────────────────────────────────────────────────────\n\nArguments\n -o, --output=\u003cfile\u003e    Output file path\n\nActions\n e  Export\n p  Preview\n r  Reset\n q  Quit\n```\n\n### Updated beads-import\n\n```\nImport from JSONL\n────────────────────────────────────────────────────────────\n\nArguments\n -i, --input=\u003cfile\u003e      Input file path\n -n, --dry-run           Preview without importing\n -r, --resolve-conflicts Conflict resolution strategy\n\nActions\n i  Import\n p  Preview\n x  Reset\n q  Quit\n```\n\n### Updated beads-init\n\n```\nInitialize Project\n────────────────────────────────────────────────────────────\n\nArguments\n -p, --prefix=\u003cprefix\u003e  Issue prefix (e.g., bd, proj)\n -d, --db=\u003cpath\u003e        Database path (default: .beads/prefix.db)\n\nActions\n i  Initialize\n p  Preview\n r  Reset\n q  Quit\n```\n\n## Implementation Notes\n\n1. Convert to flag-style arguments\n2. Use lowercase keys for preview/reset\n3. Consistent `:transient t` for non-destructive actions\n4. Show helpful defaults in descriptions","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-22T19:35:07.420058333+02:00","updated_at":"2025-10-22T19:39:00.14389475+02:00","dependencies":[{"issue_id":"beads.el-76","depends_on_id":"beads.el-1","type":"blocks","created_at":"2025-10-22T19:35:07.429610602+02:00","created_by":"daemon"}]}
{"id":"beads.el-77","title":"Review and update beads-reopen.el transient menu","description":"Review the existing beads-reopen.el transient menu implementation and update\nit to follow Magit/Forge design patterns documented in MAGIT_PATTERNS.md.\n\n## Current Implementation\n\nThe beads-reopen.el module implements the transient menu for `bd reopen`\ncommand (recently implemented).\n\n## Review Checklist\n\nBased on MAGIT_PATTERNS.md:\n\n- [ ] Arguments section comes before actions\n- [ ] Flags use `-X` short form and `--long-form` format\n- [ ] Descriptions are concise and explain the effect\n- [ ] Actions are grouped into logical columns with headers\n- [ ] Key bindings follow Magit conventions (R for reopen)\n- [ ] Context-aware: works from show/list buffers\n- [ ] Batch reopen from marked items supported\n- [ ] Preview and reset commands have `:transient t`\n- [ ] Advanced options use `:level 5` or `:level 7`\n- [ ] Global flags (--actor, --db) are not exposed in menu\n- [ ] Validation is clear and user-friendly\n- [ ] Confirmation prompt for batch operations\n\n## Tasks\n\n1. [ ] Read current implementation\n2. [ ] Compare against MAGIT_PATTERNS.md guidelines\n3. [ ] Create text-based preview of current menu\n4. [ ] Identify areas needing updates\n5. [ ] Update implementation to match patterns\n6. [ ] Add/update text-based preview in this issue\n7. [ ] Run tests to ensure nothing broke\n8. [ ] Update documentation if needed","design":"## Current Menu Structure\n\n```\nReopen Issue(s)\n────────────────────────────────────────────────────────────\n\nReopen Issue\n i  Issue ID\n r  Reason\n\nActions\n x  Reopen issue\n P  Preview command\n R  Reset fields\n q  Quit\n```\n\n## Current Implementation Analysis\n\n**Good Practices:**\n- ✓ Context-aware: Auto-detects issue from buffers\n- ✓ Reason field for context\n- ✓ Preview and reset functionality\n\n**Needs Update (per MAGIT_PATTERNS.md):**\n\n1. **Arguments Format**\n   - Current: Custom infixes\n   - Should: Flag-style arguments\n\n2. **Key Bindings**\n   - Current: `x` for reopen\n   - Should: Consider `R` (uppercase for state change)\n\n## Proposed Updated Menu\n\n```\nReopen Issue(s)\n────────────────────────────────────────────────────────────\n\nArguments\n -r, --reason=\u003ctext\u003e    Reason for reopening\n\nActions\n R  Reopen issue(s)\n p  Preview\n x  Reset\n q  Quit\n```\n\n## Implementation Recommendations\n\n1. **Context awareness:**\n   - Keep auto-detection from show/list buffers\n   - Support batch reopen from marked items\n\n2. **Key bindings:**\n   - Use `R` for reopen (uppercase = state change)\n   - Matches pattern: `k` close, `R` reopen\n\n3. **Reason field:**\n   - Make optional (not required)\n   - Use `-r, --reason=` format\n\n4. **Batch operations:**\n   - Support multiple issue IDs\n   - Show confirmation: \"Reopen 5 issues?\"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-22T19:35:26.246488523+02:00","updated_at":"2025-10-22T19:39:18.195892664+02:00","dependencies":[{"issue_id":"beads.el-77","depends_on_id":"beads.el-1","type":"blocks","created_at":"2025-10-22T19:35:26.256346083+02:00","created_by":"daemon"}]}
{"id":"beads.el-78","title":"Review and update beads-delete.el transient menu","description":"Review the existing beads-delete.el transient menu implementation and update\nit to follow Magit/Forge design patterns documented in MAGIT_PATTERNS.md.\n\n## Current Implementation\n\nThe beads-delete.el module implements the transient menu for `bd delete`\ncommand.\n\n## Review Checklist\n\nBased on MAGIT_PATTERNS.md:\n\n- [ ] Arguments section comes before actions\n- [ ] Flags use `-X` short form and `--long-form` format\n- [ ] Descriptions are concise and explain the effect\n- [ ] Actions are grouped into logical columns with headers\n- [ ] Key bindings follow Magit conventions\n- [ ] Context-aware: works from show/list buffers\n- [ ] Preview and reset commands have `:transient t`\n- [ ] Advanced options use `:level 5` or `:level 7`\n- [ ] Global flags (--actor, --db) are not exposed in menu\n- [ ] Validation is clear and user-friendly\n- [ ] Strong confirmation prompt for destructive operations\n- [ ] Warning about permanent deletion\n\n## Tasks\n\n1. [ ] Read current implementation\n2. [ ] Compare against MAGIT_PATTERNS.md guidelines\n3. [ ] Create text-based preview of current menu\n4. [ ] Identify areas needing updates\n5. [ ] Update implementation to match patterns\n6. [ ] Add/update text-based preview in this issue\n7. [ ] Run tests to ensure nothing broke\n8. [ ] Update documentation if needed","design":"## Current Implementation\n\n**No transient menu** - Uses direct interactive command with preview.\n\nCurrent workflow:\n1. `M-x beads-delete` or call with issue ID\n2. Auto-detects issue from context (list/show buffers)\n3. Shows deletion preview in dedicated buffer\n4. Prompts for yes/no confirmation\n5. Executes deletion if confirmed\n\n```\n[No transient menu - direct command execution]\n\nWorkflow:\n1. beads-delete \u003cissue-id\u003e\n2. → Shows preview buffer: *beads-delete-preview: bd-42*\n3. → Prompts: \"Delete issue bd-42? (yes or no)\"\n4. → If yes: executes bd delete --force bd-42\n5. → If no: cancels and closes preview\n```\n\n## Analysis\n\n**Good Practices:**\n- ✓ Context-aware detection\n- ✓ Preview before destruction\n- ✓ Explicit yes/no confirmation\n- ✓ Cleans up buffers after deletion\n- ✓ Auto-refreshes list buffers\n\n**Decision Point:**\n\nShould beads-delete have a transient menu, or keep the current approach?\n\n**Option 1: Keep current (no transient)** ✓ Recommended\n- Simpler for a destructive operation\n- Preview + confirmation is sufficient\n- No parameters to set (just issue ID + --force)\n- Direct workflow is clearer for dangerous operations\n\n**Option 2: Add minimal transient**\n```\nDelete Issue (DESTRUCTIVE)\n────────────────────────────────────────────────────────────\n\nWARNING: This is permanent and cannot be undone!\n\nActions\n p  Preview what will be deleted\n D  Delete (with confirmation)\n q  Quit\n```\n\n## Recommendation\n\n**Keep the current non-transient implementation** for these reasons:\n\n1. **Simplicity** - Delete has no optional flags or arguments\n2. **Safety** - Direct yes/no prompt is clearer for destructive ops\n3. **Clear workflow** - Preview → Confirm → Execute is straightforward\n4. **No configuration** - Nothing to set via transient infixes\n\nThe current implementation is actually excellent for a dangerous operation!\n\n## Minor Improvements (Optional)\n\n1. **Warning color** - Make preview buffer name red/warning color\n2. **Preview format** - Add header explaining what will happen\n3. **Batch delete** - Support deleting multiple marked issues from list buffer\n4. **Keybinding** - Add to beads-list-mode-map for quick access\n\n## No Changes Needed\n\nThe current implementation follows a different but equally valid pattern for\ndestructive operations. No transient menu is needed or beneficial here.","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-22T19:35:27.531408556+02:00","updated_at":"2025-10-22T19:39:45.504217901+02:00","dependencies":[{"issue_id":"beads.el-78","depends_on_id":"beads.el-1","type":"blocks","created_at":"2025-10-22T19:35:27.542371186+02:00","created_by":"daemon"}]}
{"id":"beads.el-8","title":"beads.el: Root transient menu and keybindings","description":"Implement the main entry point and root transient menu.\n\nRoot transient menu structure:\n- Groups organized logically (View, Create/Edit, Dependencies, Admin)\n- Hierarchy similar to Magit's dispatch menu\n\nMenu layout:\n\n\nKeybindings:\n- Global: M-x beads (or custom binding like C-c b)\n- In code: Jump to issue at point (beads.el-N references)\n- Context-aware commands in list/show buffers\n\nFeatures:\n- Show current project/database in menu header\n- Persistent settings within session\n- Quick access to most common commands","acceptance_criteria":"## Acceptance Criteria\n\n### Root Transient Menu\n- [ ] beads.el-dispatch (or beads.el-main) transient defined\n- [ ] Accessible via M-x beads\n- [ ] Optional global keybinding (e.g., C-c b) documented\n- [ ] Menu organized into logical groups\n\n### Menu Structure\n- [ ] **View group**: list, ready, blocked, show, stats\n- [ ] **Create/Edit group**: create, update, close\n- [ ] **Dependencies group**: dep submenu\n- [ ] **Admin group**: init, export, import\n- [ ] **Settings group**: actor, database path configuration\n\n### Menu Header\n- [ ] Display current project name\n- [ ] Display current database path\n- [ ] Display beads version (from bd --version)\n- [ ] Visual separator between header and commands\n\n### Command Bindings\n- [ ] Single-key bindings for frequent operations\n- [ ] Consistent key scheme (l=list, r=ready, c=create, etc.)\n- [ ] Help text for each command\n- [ ] Submenu indication for nested menus\n\n### Context-Aware Commands\n- [ ] Jump to issue at point (beads.el-N in any buffer)\n- [ ] Context detection in list/show buffers\n- [ ] Quick actions from current context\n\n### Global Keybindings\n- [ ] M-x beads always works\n- [ ] Optional C-c b prefix (customizable)\n- [ ] Jump to issue at point: C-c b j or similar\n- [ ] Quick create: C-c b c\n- [ ] Quick list: C-c b l\n\n### Integration\n- [ ] All submenus accessible from root menu\n- [ ] Navigation between menus smooth\n- [ ] Quit returns to previous buffer\n- [ ] Command execution closes transient by default\n\n### Customization\n- [ ] User can customize key prefix\n- [ ] User can disable global bindings\n- [ ] User can add custom menu items\n\n## Test Coverage (ERT)\nTests in lisp/test/beads-transient-root-test.el:\n\n- [ ] **Menu Definition**\n  - Test root transient exists\n  - Test all groups defined\n  - Test all commands bound\n\n- [ ] **Menu Display**\n  - Test header generation\n  - Test project name display\n  - Test database path display\n  - Mock bd --version output\n\n- [ ] **Navigation**\n  - Test accessing submenus\n  - Test returning from submenus\n  - Test quit behavior\n\n- [ ] **Context Commands**\n  - Test beads.el-N reference detection at point\n  - Test jump to issue functionality\n  - Test invalid reference handling\n\n- [ ] **Keybindings**\n  - Test M-x beads invocation\n  - Test global keybinding (if enabled)\n  - Test context-aware bindings\n\n- [ ] **Customization**\n  - Test custom key prefix\n  - Test disabled global bindings\n  - Test custom menu items\n\nTest coverage should be \u003e70% for root transient functionality.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:15.335969122+02:00","closed_at":"2025-10-16T22:22:48.866529389+02:00","dependencies":[{"issue_id":"beads.el-8","depends_on_id":"beads.el-1","type":"discovered-from","created_at":"2025-10-22T19:07:36.585389547+02:00","created_by":"import"},{"issue_id":"beads.el-8","depends_on_id":"beads.el-2","type":"blocks","created_at":"2025-10-22T19:07:36.593368542+02:00","created_by":"import"}]}
{"id":"beads.el-9","title":"beads.el: Testing and documentation","description":"Create tests and documentation for beads.el package.\n\nTesting:\n- Unit tests for utility functions (JSON parsing, process handling)\n- Integration tests for bd command invocations\n- Mock bd responses for testing without real database\n- Test transient menu definitions\n- Test tabulated-list rendering\n- Test buffer state management\n\nDocumentation:\n- README.md for lisp/ directory\n- Installation instructions (MELPA, manual)\n- Quick start guide\n- Configuration examples\n- Keybinding reference\n- Screenshots/demos\n- Comparison with CLI workflow\n- Troubleshooting section\n\nPackage files:\n- beads.el-pkg.el (package descriptor)\n- Commentary section in beads.el\n- Docstrings for all public functions\n- Customization variable docs","acceptance_criteria":"## Acceptance Criteria\n\n### Test Infrastructure\n- [ ] Makefile or test runner script for running all tests\n- [ ] Command: make test or equivalent runs all ERT tests\n- [ ] Command: make test-coverage generates coverage report\n- [ ] Tests located in lisp/test/ directory\n- [ ] All test files follow naming: *-test.el\n\n### Test Files Required\nAll test files from other issues must exist and pass:\n- [ ] test/beads-process-test.el (from beads.el-2)\n- [ ] test/beads-project-test.el (from beads.el-2)\n- [ ] test/beads-utils-test.el (from beads.el-2)\n- [ ] test/beads-list-test.el (from beads.el-3)\n- [ ] test/beads-show-test.el (from beads.el-4)\n- [ ] test/beads-transient-create-test.el (from beads.el-5)\n- [ ] test/beads-transient-update-test.el (from beads.el-6)\n- [ ] test/beads-transient-misc-test.el (from beads.el-7)\n- [ ] test/beads-transient-root-test.el (from beads.el-8)\n\n### Coverage Targets\n- [ ] Overall test coverage \u003e70%\n- [ ] Core utilities (process, project, utils) \u003e80%\n- [ ] UI components (list, show, transient) \u003e65%\n- [ ] Coverage report generated and reviewed\n\n### Test Quality\n- [ ] All tests pass on Emacs 27.1+\n- [ ] Tests use proper mocking for bd CLI calls\n- [ ] No external dependencies required for tests\n- [ ] Tests run in isolated environments\n- [ ] Fast test execution (\u003c30 seconds total)\n\n### Documentation\n\n#### README.md in lisp/\n- [ ] Project overview and features\n- [ ] Requirements (Emacs version, dependencies)\n- [ ] Installation instructions (MELPA, manual, use-package)\n- [ ] Quick start guide\n- [ ] Configuration examples\n- [ ] Keybinding reference table\n- [ ] Comparison with CLI workflow\n- [ ] Screenshots or GIFs demonstrating usage\n- [ ] Troubleshooting section\n- [ ] Contributing guidelines\n- [ ] License\n\n#### Package Files\n- [ ] beads.el-pkg.el with proper package descriptor\n- [ ] Package-Version header\n- [ ] Package-Requires specifying dependencies\n- [ ] Keywords for MELPA\n\n#### Code Documentation\n- [ ] Commentary section in beads.el\n- [ ] Docstrings for all public functions (;;; docstring format)\n- [ ] Docstrings for all customization variables\n- [ ] Code comments for complex logic\n- [ ] Examples in docstrings where helpful\n\n#### User Guide\n- [ ] Configuration examples for different workflows\n- [ ] Integration with other packages (projectile, etc.)\n- [ ] Customization options documented\n- [ ] Performance tips\n- [ ] Known limitations\n\n### CI/CD\n- [ ] GitHub Actions workflow for testing (optional but recommended)\n- [ ] Test on multiple Emacs versions (27.1, 28.x, 29.x)\n- [ ] Linting with package-lint or checkdoc\n\n## Test Coverage (ERT)\nTests in lisp/test/beads-meta-test.el:\n\n- [ ] **Test Runner**\n  - Test that all test files load without error\n  - Test that all tests are discovered\n  - Test coverage calculation works\n\n- [ ] **Package Loading**\n  - Test package loads without errors\n  - Test autoloads are correct\n  - Test no compilation warnings\n\n- [ ] **Documentation**\n  - Test README.md exists and is well-formed\n  - Test all public functions have docstrings\n  - Test package metadata is correct\n\nEnsure comprehensive test suite supports long-term maintenance.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-22T19:07:36.117078644+02:00","updated_at":"2025-10-22T19:08:15.344396191+02:00","closed_at":"2025-10-16T22:22:48.892362039+02:00","dependencies":[{"issue_id":"beads.el-9","depends_on_id":"beads.el-1","type":"discovered-from","created_at":"2025-10-22T19:07:36.601563376+02:00","created_by":"import"}]}
